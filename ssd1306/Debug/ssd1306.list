
ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000564c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001600  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d5c  08006d5c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d5c  08006d5c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d5c  08006d5c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  2000007c  08006de0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08006de0  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a03  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c61  00000000  00000000  00028aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000726  00000000  00000000  0002b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e3e  00000000  00000000  0002b7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d200  00000000  00000000  00043614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087be5  00000000  00000000  00050814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bd8  00000000  00000000  000d83fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000dafd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005744 	.word	0x08005744

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005744 	.word	0x08005744

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	; 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf4:	d2ed      	bcs.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <menu_pointer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void menu_pointer(uint8_t pointer)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if (pointer == 1)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d11a      	bne.n	8000d96 <menu_pointer+0x46>
  {
    SSD1306_GotoXY(0, rows[1]);
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <menu_pointer+0x84>)
 8000d62:	785b      	ldrb	r3, [r3, #1]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f003 fedd 	bl	8004b28 <SSD1306_GotoXY>
    SSD1306_Puts(">", &Font_7x10, 1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4919      	ldr	r1, [pc, #100]	; (8000dd8 <menu_pointer+0x88>)
 8000d72:	481a      	ldr	r0, [pc, #104]	; (8000ddc <menu_pointer+0x8c>)
 8000d74:	f003 ff6e 	bl	8004c54 <SSD1306_Puts>
    SSD1306_GotoXY(0, rows[2]);
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <menu_pointer+0x84>)
 8000d7a:	789b      	ldrb	r3, [r3, #2]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2000      	movs	r0, #0
 8000d82:	f003 fed1 	bl	8004b28 <SSD1306_GotoXY>
    SSD1306_Puts(" ", &Font_7x10, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	4913      	ldr	r1, [pc, #76]	; (8000dd8 <menu_pointer+0x88>)
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <menu_pointer+0x90>)
 8000d8c:	f003 ff62 	bl	8004c54 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000d90:	f003 fe26 	bl	80049e0 <SSD1306_UpdateScreen>
    SSD1306_Puts(" ", &Font_7x10, 1);
    SSD1306_GotoXY(0, rows[2]);
    SSD1306_Puts(">", &Font_7x10, 1);
    SSD1306_UpdateScreen();
  }
}
 8000d94:	e019      	b.n	8000dca <menu_pointer+0x7a>
    SSD1306_GotoXY(0, rows[1]);
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <menu_pointer+0x84>)
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f003 fec2 	bl	8004b28 <SSD1306_GotoXY>
    SSD1306_Puts(" ", &Font_7x10, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <menu_pointer+0x88>)
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <menu_pointer+0x90>)
 8000daa:	f003 ff53 	bl	8004c54 <SSD1306_Puts>
    SSD1306_GotoXY(0, rows[2]);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <menu_pointer+0x84>)
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4619      	mov	r1, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f003 feb6 	bl	8004b28 <SSD1306_GotoXY>
    SSD1306_Puts(">", &Font_7x10, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4906      	ldr	r1, [pc, #24]	; (8000dd8 <menu_pointer+0x88>)
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <menu_pointer+0x8c>)
 8000dc2:	f003 ff47 	bl	8004c54 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000dc6:	f003 fe0b 	bl	80049e0 <SSD1306_UpdateScreen>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	2000001c 	.word	0x2000001c
 8000ddc:	0800575c 	.word	0x0800575c
 8000de0:	08005760 	.word	0x08005760

08000de4 <DISPLAY_Init>:

void DISPLAY_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  SSD1306_GotoXY(0, 0);
 8000de8:	2100      	movs	r1, #0
 8000dea:	2000      	movs	r0, #0
 8000dec:	f003 fe9c 	bl	8004b28 <SSD1306_GotoXY>
  SSD1306_Puts("STARTING...", &Font_11x18, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	4906      	ldr	r1, [pc, #24]	; (8000e0c <DISPLAY_Init+0x28>)
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <DISPLAY_Init+0x2c>)
 8000df6:	f003 ff2d 	bl	8004c54 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000dfa:	f003 fdf1 	bl	80049e0 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8000dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e02:	f001 fa17 	bl	8002234 <HAL_Delay>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000024 	.word	0x20000024
 8000e10:	08005764 	.word	0x08005764

08000e14 <DISPLAY_Start>:

void DISPLAY_Start(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  SSD1306_GotoXY(20, 0);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2014      	movs	r0, #20
 8000e1c:	f003 fe84 	bl	8004b28 <SSD1306_GotoXY>
  SSD1306_Puts("SECLECT MODE", &Font_7x10, 1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	4911      	ldr	r1, [pc, #68]	; (8000e68 <DISPLAY_Start+0x54>)
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <DISPLAY_Start+0x58>)
 8000e26:	f003 ff15 	bl	8004c54 <SSD1306_Puts>
  SSD1306_GotoXY(0, 20);
 8000e2a:	2114      	movs	r1, #20
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f003 fe7b 	bl	8004b28 <SSD1306_GotoXY>
  SSD1306_Puts(">", &Font_7x10, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <DISPLAY_Start+0x54>)
 8000e36:	480e      	ldr	r0, [pc, #56]	; (8000e70 <DISPLAY_Start+0x5c>)
 8000e38:	f003 ff0c 	bl	8004c54 <SSD1306_Puts>
  SSD1306_GotoXY(10, 20);
 8000e3c:	2114      	movs	r1, #20
 8000e3e:	200a      	movs	r0, #10
 8000e40:	f003 fe72 	bl	8004b28 <SSD1306_GotoXY>
  SSD1306_Puts("1.MEASURE", &Font_7x10, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <DISPLAY_Start+0x54>)
 8000e48:	480a      	ldr	r0, [pc, #40]	; (8000e74 <DISPLAY_Start+0x60>)
 8000e4a:	f003 ff03 	bl	8004c54 <SSD1306_Puts>
  SSD1306_GotoXY(10, 40);
 8000e4e:	2128      	movs	r1, #40	; 0x28
 8000e50:	200a      	movs	r0, #10
 8000e52:	f003 fe69 	bl	8004b28 <SSD1306_GotoXY>
  SSD1306_Puts("2.THRESHOLD", &Font_7x10, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	4903      	ldr	r1, [pc, #12]	; (8000e68 <DISPLAY_Start+0x54>)
 8000e5a:	4807      	ldr	r0, [pc, #28]	; (8000e78 <DISPLAY_Start+0x64>)
 8000e5c:	f003 fefa 	bl	8004c54 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000e60:	f003 fdbe 	bl	80049e0 <SSD1306_UpdateScreen>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000001c 	.word	0x2000001c
 8000e6c:	08005770 	.word	0x08005770
 8000e70:	0800575c 	.word	0x0800575c
 8000e74:	08005780 	.word	0x08005780
 8000e78:	0800578c 	.word	0x0800578c

08000e7c <DISPLAY_SELECT_Range>:

void DISPLAY_SELECT_Range(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  SSD1306_GotoXY(20, 0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	2014      	movs	r0, #20
 8000e84:	f003 fe50 	bl	8004b28 <SSD1306_GotoXY>
  SSD1306_Puts("SELECT RANGE", &Font_7x10, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4911      	ldr	r1, [pc, #68]	; (8000ed0 <DISPLAY_SELECT_Range+0x54>)
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <DISPLAY_SELECT_Range+0x58>)
 8000e8e:	f003 fee1 	bl	8004c54 <SSD1306_Puts>
  SSD1306_GotoXY(0, 20);
 8000e92:	2114      	movs	r1, #20
 8000e94:	2000      	movs	r0, #0
 8000e96:	f003 fe47 	bl	8004b28 <SSD1306_GotoXY>
  SSD1306_Puts(">", &Font_7x10, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <DISPLAY_SELECT_Range+0x54>)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <DISPLAY_SELECT_Range+0x5c>)
 8000ea0:	f003 fed8 	bl	8004c54 <SSD1306_Puts>
  SSD1306_GotoXY(10, 20);
 8000ea4:	2114      	movs	r1, #20
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f003 fe3e 	bl	8004b28 <SSD1306_GotoXY>
  SSD1306_Puts("1.RANGE1:10-100", &Font_7x10, 1);
 8000eac:	2201      	movs	r2, #1
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <DISPLAY_SELECT_Range+0x54>)
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <DISPLAY_SELECT_Range+0x60>)
 8000eb2:	f003 fecf 	bl	8004c54 <SSD1306_Puts>
  SSD1306_GotoXY(10, 40);
 8000eb6:	2128      	movs	r1, #40	; 0x28
 8000eb8:	200a      	movs	r0, #10
 8000eba:	f003 fe35 	bl	8004b28 <SSD1306_GotoXY>
  SSD1306_Puts("2.RANGE2:10-1000", &Font_7x10, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4903      	ldr	r1, [pc, #12]	; (8000ed0 <DISPLAY_SELECT_Range+0x54>)
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <DISPLAY_SELECT_Range+0x64>)
 8000ec4:	f003 fec6 	bl	8004c54 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000ec8:	f003 fd8a 	bl	80049e0 <SSD1306_UpdateScreen>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000001c 	.word	0x2000001c
 8000ed4:	08005798 	.word	0x08005798
 8000ed8:	0800575c 	.word	0x0800575c
 8000edc:	080057a8 	.word	0x080057a8
 8000ee0:	080057b8 	.word	0x080057b8

08000ee4 <STATE_BUTTON_Handle>:

void STATE_BUTTON_Handle(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  if (state_button == state_null)
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <STATE_BUTTON_Handle+0x34>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10a      	bne.n	8000f08 <STATE_BUTTON_Handle+0x24>
  {
    if (state_no_null == 1)
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <STATE_BUTTON_Handle+0x38>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d109      	bne.n	8000f0e <STATE_BUTTON_Handle+0x2a>
    {
      change_state_null = 1;
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <STATE_BUTTON_Handle+0x3c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
      state_no_null = 0;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <STATE_BUTTON_Handle+0x38>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    state_no_null = 1;
  }
}
 8000f06:	e002      	b.n	8000f0e <STATE_BUTTON_Handle+0x2a>
    state_no_null = 1;
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <STATE_BUTTON_Handle+0x38>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000011d 	.word	0x2000011d
 8000f1c:	20000133 	.word	0x20000133
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <TASK_Handle>:

void TASK_Handle(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af02      	add	r7, sp, #8
  switch (state_machine)
 8000f2a:	4bad      	ldr	r3, [pc, #692]	; (80011e0 <TASK_Handle+0x2bc>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	f200 8552 	bhi.w	80019d8 <TASK_Handle+0xab4>
 8000f34:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <TASK_Handle+0x18>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000f59 	.word	0x08000f59
 8000f40:	08000ff9 	.word	0x08000ff9
 8000f44:	080010ad 	.word	0x080010ad
 8000f48:	08001161 	.word	0x08001161
 8000f4c:	080012b5 	.word	0x080012b5
 8000f50:	08001211 	.word	0x08001211
 8000f54:	0800163d 	.word	0x0800163d
  {
  case STATE_START:
    if (flag_screen == 1)
 8000f58:	4ba2      	ldr	r3, [pc, #648]	; (80011e4 <TASK_Handle+0x2c0>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d10f      	bne.n	8000f80 <TASK_Handle+0x5c>
    {
    	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f66:	48a0      	ldr	r0, [pc, #640]	; (80011e8 <TASK_Handle+0x2c4>)
 8000f68:	f002 f848 	bl	8002ffc <HAL_GPIO_WritePin>
      SSD1306_Clear();
 8000f6c:	f003 fe97 	bl	8004c9e <SSD1306_Clear>
      DISPLAY_Start();
 8000f70:	f7ff ff50 	bl	8000e14 <DISPLAY_Start>
      flag_screen = 0;
 8000f74:	4b9b      	ldr	r3, [pc, #620]	; (80011e4 <TASK_Handle+0x2c0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
      menu = 1;
 8000f7a:	4b9c      	ldr	r3, [pc, #624]	; (80011ec <TASK_Handle+0x2c8>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
    }
    if ((state_button == state_mode) && (change_state_null == 1))
 8000f80:	4b9b      	ldr	r3, [pc, #620]	; (80011f0 <TASK_Handle+0x2cc>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d118      	bne.n	8000fbc <TASK_Handle+0x98>
 8000f8a:	4b9a      	ldr	r3, [pc, #616]	; (80011f4 <TASK_Handle+0x2d0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d114      	bne.n	8000fbc <TASK_Handle+0x98>
    {
      menu = menu + 1;
 8000f92:	4b96      	ldr	r3, [pc, #600]	; (80011ec <TASK_Handle+0x2c8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b94      	ldr	r3, [pc, #592]	; (80011ec <TASK_Handle+0x2c8>)
 8000f9c:	701a      	strb	r2, [r3, #0]
      if (menu == 3)	 menu = 1;
 8000f9e:	4b93      	ldr	r3, [pc, #588]	; (80011ec <TASK_Handle+0x2c8>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d102      	bne.n	8000fac <TASK_Handle+0x88>
 8000fa6:	4b91      	ldr	r3, [pc, #580]	; (80011ec <TASK_Handle+0x2c8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
      menu_pointer(menu);
 8000fac:	4b8f      	ldr	r3, [pc, #572]	; (80011ec <TASK_Handle+0x2c8>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fecd 	bl	8000d50 <menu_pointer>
      change_state_null = 0;
 8000fb6:	4b8f      	ldr	r3, [pc, #572]	; (80011f4 <TASK_Handle+0x2d0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_set) && (change_state_null == 1))
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <TASK_Handle+0x2cc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	f040 850a 	bne.w	80019dc <TASK_Handle+0xab8>
 8000fc8:	4b8a      	ldr	r3, [pc, #552]	; (80011f4 <TASK_Handle+0x2d0>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	f040 8505 	bne.w	80019dc <TASK_Handle+0xab8>
    {
      if (menu == 1)
 8000fd2:	4b86      	ldr	r3, [pc, #536]	; (80011ec <TASK_Handle+0x2c8>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d103      	bne.n	8000fe2 <TASK_Handle+0xbe>
      {
        state_machine = STATE_MEASURE;
 8000fda:	4b81      	ldr	r3, [pc, #516]	; (80011e0 <TASK_Handle+0x2bc>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e002      	b.n	8000fe8 <TASK_Handle+0xc4>
      }
      else
      {
        state_machine = STATE_THRESHOLD;
 8000fe2:	4b7f      	ldr	r3, [pc, #508]	; (80011e0 <TASK_Handle+0x2bc>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	701a      	strb	r2, [r3, #0]
      }
      flag_screen = 1;
 8000fe8:	4b7e      	ldr	r3, [pc, #504]	; (80011e4 <TASK_Handle+0x2c0>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
      change_state_null = 0;
 8000fee:	4b81      	ldr	r3, [pc, #516]	; (80011f4 <TASK_Handle+0x2d0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
    }
    
    break;
 8000ff4:	f000 bcf2 	b.w	80019dc <TASK_Handle+0xab8>

  case STATE_MEASURE:
    if (flag_screen == 1)
 8000ff8:	4b7a      	ldr	r3, [pc, #488]	; (80011e4 <TASK_Handle+0x2c0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d10f      	bne.n	8001020 <TASK_Handle+0xfc>
    {
    	HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001006:	487c      	ldr	r0, [pc, #496]	; (80011f8 <TASK_Handle+0x2d4>)
 8001008:	f001 fff8 	bl	8002ffc <HAL_GPIO_WritePin>
      SSD1306_Clear();
 800100c:	f003 fe47 	bl	8004c9e <SSD1306_Clear>
      DISPLAY_SELECT_Range();
 8001010:	f7ff ff34 	bl	8000e7c <DISPLAY_SELECT_Range>
      flag_screen = 0;
 8001014:	4b73      	ldr	r3, [pc, #460]	; (80011e4 <TASK_Handle+0x2c0>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
      menu = 1;
 800101a:	4b74      	ldr	r3, [pc, #464]	; (80011ec <TASK_Handle+0x2c8>)
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_mode) && (change_state_null == 1))
 8001020:	4b73      	ldr	r3, [pc, #460]	; (80011f0 <TASK_Handle+0x2cc>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d118      	bne.n	800105c <TASK_Handle+0x138>
 800102a:	4b72      	ldr	r3, [pc, #456]	; (80011f4 <TASK_Handle+0x2d0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d114      	bne.n	800105c <TASK_Handle+0x138>
    {
      menu = menu + 1;
 8001032:	4b6e      	ldr	r3, [pc, #440]	; (80011ec <TASK_Handle+0x2c8>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b6c      	ldr	r3, [pc, #432]	; (80011ec <TASK_Handle+0x2c8>)
 800103c:	701a      	strb	r2, [r3, #0]
      if (menu == 3)	 menu = 1;
 800103e:	4b6b      	ldr	r3, [pc, #428]	; (80011ec <TASK_Handle+0x2c8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d102      	bne.n	800104c <TASK_Handle+0x128>
 8001046:	4b69      	ldr	r3, [pc, #420]	; (80011ec <TASK_Handle+0x2c8>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
      menu_pointer(menu);
 800104c:	4b67      	ldr	r3, [pc, #412]	; (80011ec <TASK_Handle+0x2c8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fe7d 	bl	8000d50 <menu_pointer>
      change_state_null = 0;
 8001056:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <TASK_Handle+0x2d0>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_set) && (change_state_null == 1))
 800105c:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <TASK_Handle+0x2cc>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b06      	cmp	r3, #6
 8001064:	f040 84bc 	bne.w	80019e0 <TASK_Handle+0xabc>
 8001068:	4b62      	ldr	r3, [pc, #392]	; (80011f4 <TASK_Handle+0x2d0>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	f040 84b7 	bne.w	80019e0 <TASK_Handle+0xabc>
    {
      if (menu == 1)
 8001072:	4b5e      	ldr	r3, [pc, #376]	; (80011ec <TASK_Handle+0x2c8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <TASK_Handle+0x168>
      {
        HAL_GPIO_WritePin(CHANGE_RESISTOR_GPIO_Port, CHANGE_RESISTOR_Pin, CHANGE_RESISTOR_100);
 800107a:	2200      	movs	r2, #0
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	485a      	ldr	r0, [pc, #360]	; (80011e8 <TASK_Handle+0x2c4>)
 8001080:	f001 ffbc 	bl	8002ffc <HAL_GPIO_WritePin>
        state_machine = STATE_1_MEASURE;
 8001084:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <TASK_Handle+0x2bc>)
 8001086:	2203      	movs	r2, #3
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	e007      	b.n	800109c <TASK_Handle+0x178>
      }
      else
      {
        HAL_GPIO_WritePin(CHANGE_RESISTOR_GPIO_Port, CHANGE_RESISTOR_Pin, CHANGE_RESISTOR_1000);
 800108c:	2201      	movs	r2, #1
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	4855      	ldr	r0, [pc, #340]	; (80011e8 <TASK_Handle+0x2c4>)
 8001092:	f001 ffb3 	bl	8002ffc <HAL_GPIO_WritePin>
        state_machine = STATE_2_MEASURE;
 8001096:	4b52      	ldr	r3, [pc, #328]	; (80011e0 <TASK_Handle+0x2bc>)
 8001098:	2205      	movs	r2, #5
 800109a:	701a      	strb	r2, [r3, #0]
      }
      
      flag_screen = 1;
 800109c:	4b51      	ldr	r3, [pc, #324]	; (80011e4 <TASK_Handle+0x2c0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
      change_state_null = 0;
 80010a2:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <TASK_Handle+0x2d0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80010a8:	f000 bc9a 	b.w	80019e0 <TASK_Handle+0xabc>

  case STATE_THRESHOLD:
    if (flag_screen == 1)
 80010ac:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <TASK_Handle+0x2c0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10f      	bne.n	80010d4 <TASK_Handle+0x1b0>
    {
    	HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, 1);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ba:	484f      	ldr	r0, [pc, #316]	; (80011f8 <TASK_Handle+0x2d4>)
 80010bc:	f001 ff9e 	bl	8002ffc <HAL_GPIO_WritePin>
      SSD1306_Clear();
 80010c0:	f003 fded 	bl	8004c9e <SSD1306_Clear>
      DISPLAY_SELECT_Range();
 80010c4:	f7ff feda 	bl	8000e7c <DISPLAY_SELECT_Range>
      flag_screen = 0;
 80010c8:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <TASK_Handle+0x2c0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
      menu = 1;
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <TASK_Handle+0x2c8>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_mode) && (change_state_null == 1))
 80010d4:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <TASK_Handle+0x2cc>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d118      	bne.n	8001110 <TASK_Handle+0x1ec>
 80010de:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <TASK_Handle+0x2d0>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d114      	bne.n	8001110 <TASK_Handle+0x1ec>
    {
      menu = menu + 1;
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <TASK_Handle+0x2c8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <TASK_Handle+0x2c8>)
 80010f0:	701a      	strb	r2, [r3, #0]
      if (menu == 3)	 menu = 1;
 80010f2:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <TASK_Handle+0x2c8>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d102      	bne.n	8001100 <TASK_Handle+0x1dc>
 80010fa:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <TASK_Handle+0x2c8>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
      menu_pointer(menu);
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <TASK_Handle+0x2c8>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fe23 	bl	8000d50 <menu_pointer>
      change_state_null = 0;
 800110a:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <TASK_Handle+0x2d0>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_set) && (change_state_null == 1))
 8001110:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <TASK_Handle+0x2cc>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b06      	cmp	r3, #6
 8001118:	f040 8464 	bne.w	80019e4 <TASK_Handle+0xac0>
 800111c:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <TASK_Handle+0x2d0>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	f040 845f 	bne.w	80019e4 <TASK_Handle+0xac0>
    {
      if (menu == 1)
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <TASK_Handle+0x2c8>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d108      	bne.n	8001140 <TASK_Handle+0x21c>
      {
        HAL_GPIO_WritePin(CHANGE_RESISTOR_GPIO_Port, CHANGE_RESISTOR_Pin, CHANGE_RESISTOR_100);
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	482d      	ldr	r0, [pc, #180]	; (80011e8 <TASK_Handle+0x2c4>)
 8001134:	f001 ff62 	bl	8002ffc <HAL_GPIO_WritePin>
        state_machine = STATE_1_THRESHOLD;
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <TASK_Handle+0x2bc>)
 800113a:	2204      	movs	r2, #4
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e007      	b.n	8001150 <TASK_Handle+0x22c>
      }
      else
      {
        HAL_GPIO_WritePin(CHANGE_RESISTOR_GPIO_Port, CHANGE_RESISTOR_Pin, CHANGE_RESISTOR_1000);
 8001140:	2201      	movs	r2, #1
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	4828      	ldr	r0, [pc, #160]	; (80011e8 <TASK_Handle+0x2c4>)
 8001146:	f001 ff59 	bl	8002ffc <HAL_GPIO_WritePin>
        state_machine = STATE_2_THRESHOLD;
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <TASK_Handle+0x2bc>)
 800114c:	2206      	movs	r2, #6
 800114e:	701a      	strb	r2, [r3, #0]
      }
      
      flag_screen = 1;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <TASK_Handle+0x2c0>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
      change_state_null = 0;
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <TASK_Handle+0x2d0>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800115c:	f000 bc42 	b.w	80019e4 <TASK_Handle+0xac0>
  case STATE_1_MEASURE:
    if (flag_screen == 1)
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <TASK_Handle+0x2c0>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d113      	bne.n	8001190 <TASK_Handle+0x26c>
    {
    	HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116e:	4822      	ldr	r0, [pc, #136]	; (80011f8 <TASK_Handle+0x2d4>)
 8001170:	f001 ff44 	bl	8002ffc <HAL_GPIO_WritePin>
      SSD1306_Clear();
 8001174:	f003 fd93 	bl	8004c9e <SSD1306_Clear>
      SSD1306_GotoXY(20, 0);
 8001178:	2100      	movs	r1, #0
 800117a:	2014      	movs	r0, #20
 800117c:	f003 fcd4 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("EV:10-100", &Font_7x10, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	491e      	ldr	r1, [pc, #120]	; (80011fc <TASK_Handle+0x2d8>)
 8001184:	481e      	ldr	r0, [pc, #120]	; (8001200 <TASK_Handle+0x2dc>)
 8001186:	f003 fd65 	bl	8004c54 <SSD1306_Puts>
      flag_screen = 0;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <TASK_Handle+0x2c0>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
    }

    sprintf((char *)string, "%d Lux    ", value);
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <TASK_Handle+0x2e0>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	491b      	ldr	r1, [pc, #108]	; (8001208 <TASK_Handle+0x2e4>)
 800119a:	481c      	ldr	r0, [pc, #112]	; (800120c <TASK_Handle+0x2e8>)
 800119c:	f003 fe20 	bl	8004de0 <siprintf>
    SSD1306_GotoXY(40, 20);
 80011a0:	2114      	movs	r1, #20
 80011a2:	2028      	movs	r0, #40	; 0x28
 80011a4:	f003 fcc0 	bl	8004b28 <SSD1306_GotoXY>
    SSD1306_Puts((char *)string, &Font_7x10, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	4914      	ldr	r1, [pc, #80]	; (80011fc <TASK_Handle+0x2d8>)
 80011ac:	4817      	ldr	r0, [pc, #92]	; (800120c <TASK_Handle+0x2e8>)
 80011ae:	f003 fd51 	bl	8004c54 <SSD1306_Puts>
    if ((state_button == state_mode) && (change_state_null == 1))
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <TASK_Handle+0x2cc>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d10c      	bne.n	80011d6 <TASK_Handle+0x2b2>
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <TASK_Handle+0x2d0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d108      	bne.n	80011d6 <TASK_Handle+0x2b2>
    {
      flag_screen = 1;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <TASK_Handle+0x2c0>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
      state_machine = STATE_START;
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <TASK_Handle+0x2bc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
      change_state_null = 0;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <TASK_Handle+0x2d0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
    }
    SSD1306_UpdateScreen();
 80011d6:	f003 fc03 	bl	80049e0 <SSD1306_UpdateScreen>
    
    break;
 80011da:	f000 bc04 	b.w	80019e6 <TASK_Handle+0xac2>
 80011de:	bf00      	nop
 80011e0:	2000011e 	.word	0x2000011e
 80011e4:	2000000d 	.word	0x2000000d
 80011e8:	40010800 	.word	0x40010800
 80011ec:	2000011c 	.word	0x2000011c
 80011f0:	2000011d 	.word	0x2000011d
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	2000001c 	.word	0x2000001c
 8001200:	080057cc 	.word	0x080057cc
 8001204:	20000004 	.word	0x20000004
 8001208:	080057d8 	.word	0x080057d8
 800120c:	20000120 	.word	0x20000120

  case STATE_2_MEASURE:
    if (flag_screen == 1)
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <TASK_Handle+0x368>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d113      	bne.n	8001240 <TASK_Handle+0x31c>
    {
    	HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, 1);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <TASK_Handle+0x36c>)
 8001220:	f001 feec 	bl	8002ffc <HAL_GPIO_WritePin>
      SSD1306_Clear();
 8001224:	f003 fd3b 	bl	8004c9e <SSD1306_Clear>
      SSD1306_GotoXY(20, 0);
 8001228:	2100      	movs	r1, #0
 800122a:	2014      	movs	r0, #20
 800122c:	f003 fc7c 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("EV:10-1000", &Font_7x10, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	4918      	ldr	r1, [pc, #96]	; (8001294 <TASK_Handle+0x370>)
 8001234:	4818      	ldr	r0, [pc, #96]	; (8001298 <TASK_Handle+0x374>)
 8001236:	f003 fd0d 	bl	8004c54 <SSD1306_Puts>
      flag_screen = 0;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <TASK_Handle+0x368>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
    }

    sprintf((char *)string, "%d Lux   ", value);
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <TASK_Handle+0x378>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	4915      	ldr	r1, [pc, #84]	; (80012a0 <TASK_Handle+0x37c>)
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <TASK_Handle+0x380>)
 800124c:	f003 fdc8 	bl	8004de0 <siprintf>
    SSD1306_GotoXY(40, 20);
 8001250:	2114      	movs	r1, #20
 8001252:	2028      	movs	r0, #40	; 0x28
 8001254:	f003 fc68 	bl	8004b28 <SSD1306_GotoXY>
    SSD1306_Puts((char *)string, &Font_7x10, 1);
 8001258:	2201      	movs	r2, #1
 800125a:	490e      	ldr	r1, [pc, #56]	; (8001294 <TASK_Handle+0x370>)
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <TASK_Handle+0x380>)
 800125e:	f003 fcf9 	bl	8004c54 <SSD1306_Puts>
    if ((state_button == state_mode) && (change_state_null == 1))
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <TASK_Handle+0x384>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d10c      	bne.n	8001286 <TASK_Handle+0x362>
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <TASK_Handle+0x388>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d108      	bne.n	8001286 <TASK_Handle+0x362>
    {
      flag_screen = 1;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <TASK_Handle+0x368>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
      state_machine = STATE_START;
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <TASK_Handle+0x38c>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
      change_state_null = 0;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <TASK_Handle+0x388>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
    }
    SSD1306_UpdateScreen();
 8001286:	f003 fbab 	bl	80049e0 <SSD1306_UpdateScreen>
    break;
 800128a:	e3ac      	b.n	80019e6 <TASK_Handle+0xac2>
 800128c:	2000000d 	.word	0x2000000d
 8001290:	40010c00 	.word	0x40010c00
 8001294:	2000001c 	.word	0x2000001c
 8001298:	080057e4 	.word	0x080057e4
 800129c:	20000004 	.word	0x20000004
 80012a0:	080057f0 	.word	0x080057f0
 80012a4:	20000120 	.word	0x20000120
 80012a8:	2000011d 	.word	0x2000011d
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	2000011e 	.word	0x2000011e

  case STATE_1_THRESHOLD:
    if (flag_screen == 1)
 80012b4:	4bac      	ldr	r3, [pc, #688]	; (8001568 <TASK_Handle+0x644>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d12c      	bne.n	8001316 <TASK_Handle+0x3f2>
    {
      digit_position = 0;
 80012bc:	4bab      	ldr	r3, [pc, #684]	; (800156c <TASK_Handle+0x648>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
      SSD1306_Clear();
 80012c2:	f003 fcec 	bl	8004c9e <SSD1306_Clear>
      SSD1306_GotoXY(20, 0);
 80012c6:	2100      	movs	r1, #0
 80012c8:	2014      	movs	r0, #20
 80012ca:	f003 fc2d 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("EV:10-100", &Font_7x10, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	49a7      	ldr	r1, [pc, #668]	; (8001570 <TASK_Handle+0x64c>)
 80012d2:	48a8      	ldr	r0, [pc, #672]	; (8001574 <TASK_Handle+0x650>)
 80012d4:	f003 fcbe 	bl	8004c54 <SSD1306_Puts>
      SSD1306_GotoXY(0, 20);
 80012d8:	2114      	movs	r1, #20
 80012da:	2000      	movs	r0, #0
 80012dc:	f003 fc24 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("SET VALUE:", &Font_7x10, 1);
 80012e0:	2201      	movs	r2, #1
 80012e2:	49a3      	ldr	r1, [pc, #652]	; (8001570 <TASK_Handle+0x64c>)
 80012e4:	48a4      	ldr	r0, [pc, #656]	; (8001578 <TASK_Handle+0x654>)
 80012e6:	f003 fcb5 	bl	8004c54 <SSD1306_Puts>
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 80012ea:	4ba0      	ldr	r3, [pc, #640]	; (800156c <TASK_Handle+0x648>)
 80012ec:	f993 3000 	ldrsb.w	r3, [r3]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4ba2      	ldr	r3, [pc, #648]	; (800157c <TASK_Handle+0x658>)
 80012f4:	5c9b      	ldrb	r3, [r3, r2]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	211e      	movs	r1, #30
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 fc14 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("^", &Font_7x10, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	499b      	ldr	r1, [pc, #620]	; (8001570 <TASK_Handle+0x64c>)
 8001304:	489e      	ldr	r0, [pc, #632]	; (8001580 <TASK_Handle+0x65c>)
 8001306:	f003 fca5 	bl	8004c54 <SSD1306_Puts>
      flag_screen = 0;
 800130a:	4b97      	ldr	r3, [pc, #604]	; (8001568 <TASK_Handle+0x644>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
      flag_enable_threshold = 0;
 8001310:	4b9c      	ldr	r3, [pc, #624]	; (8001584 <TASK_Handle+0x660>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_left) && (change_state_null == 1))
 8001316:	4b9c      	ldr	r3, [pc, #624]	; (8001588 <TASK_Handle+0x664>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b01      	cmp	r3, #1
 800131e:	d138      	bne.n	8001392 <TASK_Handle+0x46e>
 8001320:	4b9a      	ldr	r3, [pc, #616]	; (800158c <TASK_Handle+0x668>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d134      	bne.n	8001392 <TASK_Handle+0x46e>
    {
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 8001328:	4b90      	ldr	r3, [pc, #576]	; (800156c <TASK_Handle+0x648>)
 800132a:	f993 3000 	ldrsb.w	r3, [r3]
 800132e:	461a      	mov	r2, r3
 8001330:	4b92      	ldr	r3, [pc, #584]	; (800157c <TASK_Handle+0x658>)
 8001332:	5c9b      	ldrb	r3, [r3, r2]
 8001334:	b29b      	uxth	r3, r3
 8001336:	211e      	movs	r1, #30
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fbf5 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts(" ", &Font_7x10, 1);
 800133e:	2201      	movs	r2, #1
 8001340:	498b      	ldr	r1, [pc, #556]	; (8001570 <TASK_Handle+0x64c>)
 8001342:	4893      	ldr	r0, [pc, #588]	; (8001590 <TASK_Handle+0x66c>)
 8001344:	f003 fc86 	bl	8004c54 <SSD1306_Puts>
      digit_position = digit_position - 1;
 8001348:	4b88      	ldr	r3, [pc, #544]	; (800156c <TASK_Handle+0x648>)
 800134a:	f993 3000 	ldrsb.w	r3, [r3]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	3b01      	subs	r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	b25a      	sxtb	r2, r3
 8001356:	4b85      	ldr	r3, [pc, #532]	; (800156c <TASK_Handle+0x648>)
 8001358:	701a      	strb	r2, [r3, #0]
      if (digit_position == -1)
 800135a:	4b84      	ldr	r3, [pc, #528]	; (800156c <TASK_Handle+0x648>)
 800135c:	f993 3000 	ldrsb.w	r3, [r3]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d102      	bne.n	800136c <TASK_Handle+0x448>
      {
        digit_position = 2;
 8001366:	4b81      	ldr	r3, [pc, #516]	; (800156c <TASK_Handle+0x648>)
 8001368:	2202      	movs	r2, #2
 800136a:	701a      	strb	r2, [r3, #0]
      }
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 800136c:	4b7f      	ldr	r3, [pc, #508]	; (800156c <TASK_Handle+0x648>)
 800136e:	f993 3000 	ldrsb.w	r3, [r3]
 8001372:	461a      	mov	r2, r3
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <TASK_Handle+0x658>)
 8001376:	5c9b      	ldrb	r3, [r3, r2]
 8001378:	b29b      	uxth	r3, r3
 800137a:	211e      	movs	r1, #30
 800137c:	4618      	mov	r0, r3
 800137e:	f003 fbd3 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("^", &Font_7x10, 1);
 8001382:	2201      	movs	r2, #1
 8001384:	497a      	ldr	r1, [pc, #488]	; (8001570 <TASK_Handle+0x64c>)
 8001386:	487e      	ldr	r0, [pc, #504]	; (8001580 <TASK_Handle+0x65c>)
 8001388:	f003 fc64 	bl	8004c54 <SSD1306_Puts>
      change_state_null = 0;
 800138c:	4b7f      	ldr	r3, [pc, #508]	; (800158c <TASK_Handle+0x668>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_right) && (change_state_null == 1))
 8001392:	4b7d      	ldr	r3, [pc, #500]	; (8001588 <TASK_Handle+0x664>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b05      	cmp	r3, #5
 800139a:	d137      	bne.n	800140c <TASK_Handle+0x4e8>
 800139c:	4b7b      	ldr	r3, [pc, #492]	; (800158c <TASK_Handle+0x668>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d133      	bne.n	800140c <TASK_Handle+0x4e8>
    {
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 80013a4:	4b71      	ldr	r3, [pc, #452]	; (800156c <TASK_Handle+0x648>)
 80013a6:	f993 3000 	ldrsb.w	r3, [r3]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b73      	ldr	r3, [pc, #460]	; (800157c <TASK_Handle+0x658>)
 80013ae:	5c9b      	ldrb	r3, [r3, r2]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	211e      	movs	r1, #30
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 fbb7 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts(" ", &Font_7x10, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	496c      	ldr	r1, [pc, #432]	; (8001570 <TASK_Handle+0x64c>)
 80013be:	4874      	ldr	r0, [pc, #464]	; (8001590 <TASK_Handle+0x66c>)
 80013c0:	f003 fc48 	bl	8004c54 <SSD1306_Puts>
      digit_position = digit_position + 1;
 80013c4:	4b69      	ldr	r3, [pc, #420]	; (800156c <TASK_Handle+0x648>)
 80013c6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	b25a      	sxtb	r2, r3
 80013d2:	4b66      	ldr	r3, [pc, #408]	; (800156c <TASK_Handle+0x648>)
 80013d4:	701a      	strb	r2, [r3, #0]
      if (digit_position == 3)
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <TASK_Handle+0x648>)
 80013d8:	f993 3000 	ldrsb.w	r3, [r3]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d102      	bne.n	80013e6 <TASK_Handle+0x4c2>
      {
        digit_position = 0;
 80013e0:	4b62      	ldr	r3, [pc, #392]	; (800156c <TASK_Handle+0x648>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
      }
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 80013e6:	4b61      	ldr	r3, [pc, #388]	; (800156c <TASK_Handle+0x648>)
 80013e8:	f993 3000 	ldrsb.w	r3, [r3]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b63      	ldr	r3, [pc, #396]	; (800157c <TASK_Handle+0x658>)
 80013f0:	5c9b      	ldrb	r3, [r3, r2]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	211e      	movs	r1, #30
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fb96 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("^", &Font_7x10, 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	495c      	ldr	r1, [pc, #368]	; (8001570 <TASK_Handle+0x64c>)
 8001400:	485f      	ldr	r0, [pc, #380]	; (8001580 <TASK_Handle+0x65c>)
 8001402:	f003 fc27 	bl	8004c54 <SSD1306_Puts>
      change_state_null = 0;
 8001406:	4b61      	ldr	r3, [pc, #388]	; (800158c <TASK_Handle+0x668>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    }
    
    if ((state_button == state_up) && (change_state_null == 1))
 800140c:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <TASK_Handle+0x664>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b04      	cmp	r3, #4
 8001414:	d125      	bne.n	8001462 <TASK_Handle+0x53e>
 8001416:	4b5d      	ldr	r3, [pc, #372]	; (800158c <TASK_Handle+0x668>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d121      	bne.n	8001462 <TASK_Handle+0x53e>
    {
      value_threshold[digit_position] = value_threshold[digit_position] + 1;
 800141e:	4b53      	ldr	r3, [pc, #332]	; (800156c <TASK_Handle+0x648>)
 8001420:	f993 3000 	ldrsb.w	r3, [r3]
 8001424:	461a      	mov	r2, r3
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <TASK_Handle+0x670>)
 8001428:	569b      	ldrsb	r3, [r3, r2]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	3301      	adds	r3, #1
 800142e:	b2d9      	uxtb	r1, r3
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <TASK_Handle+0x648>)
 8001432:	f993 3000 	ldrsb.w	r3, [r3]
 8001436:	461a      	mov	r2, r3
 8001438:	b249      	sxtb	r1, r1
 800143a:	4b56      	ldr	r3, [pc, #344]	; (8001594 <TASK_Handle+0x670>)
 800143c:	5499      	strb	r1, [r3, r2]
      if (value_threshold[digit_position] == 10)
 800143e:	4b4b      	ldr	r3, [pc, #300]	; (800156c <TASK_Handle+0x648>)
 8001440:	f993 3000 	ldrsb.w	r3, [r3]
 8001444:	461a      	mov	r2, r3
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <TASK_Handle+0x670>)
 8001448:	569b      	ldrsb	r3, [r3, r2]
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d106      	bne.n	800145c <TASK_Handle+0x538>
      {
        value_threshold[digit_position] = 0;
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <TASK_Handle+0x648>)
 8001450:	f993 3000 	ldrsb.w	r3, [r3]
 8001454:	461a      	mov	r2, r3
 8001456:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <TASK_Handle+0x670>)
 8001458:	2100      	movs	r1, #0
 800145a:	5499      	strb	r1, [r3, r2]
      }
      
      change_state_null = 0;
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <TASK_Handle+0x668>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_down) && (change_state_null == 1))
 8001462:	4b49      	ldr	r3, [pc, #292]	; (8001588 <TASK_Handle+0x664>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b03      	cmp	r3, #3
 800146a:	d126      	bne.n	80014ba <TASK_Handle+0x596>
 800146c:	4b47      	ldr	r3, [pc, #284]	; (800158c <TASK_Handle+0x668>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d122      	bne.n	80014ba <TASK_Handle+0x596>
    {
      value_threshold[digit_position] = value_threshold[digit_position] - 1;
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <TASK_Handle+0x648>)
 8001476:	f993 3000 	ldrsb.w	r3, [r3]
 800147a:	461a      	mov	r2, r3
 800147c:	4b45      	ldr	r3, [pc, #276]	; (8001594 <TASK_Handle+0x670>)
 800147e:	569b      	ldrsb	r3, [r3, r2]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	3b01      	subs	r3, #1
 8001484:	b2d9      	uxtb	r1, r3
 8001486:	4b39      	ldr	r3, [pc, #228]	; (800156c <TASK_Handle+0x648>)
 8001488:	f993 3000 	ldrsb.w	r3, [r3]
 800148c:	461a      	mov	r2, r3
 800148e:	b249      	sxtb	r1, r1
 8001490:	4b40      	ldr	r3, [pc, #256]	; (8001594 <TASK_Handle+0x670>)
 8001492:	5499      	strb	r1, [r3, r2]
      if (value_threshold[digit_position] == -1)
 8001494:	4b35      	ldr	r3, [pc, #212]	; (800156c <TASK_Handle+0x648>)
 8001496:	f993 3000 	ldrsb.w	r3, [r3]
 800149a:	461a      	mov	r2, r3
 800149c:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <TASK_Handle+0x670>)
 800149e:	569b      	ldrsb	r3, [r3, r2]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d106      	bne.n	80014b4 <TASK_Handle+0x590>
      {
        value_threshold[digit_position] = 9;
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <TASK_Handle+0x648>)
 80014a8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <TASK_Handle+0x670>)
 80014b0:	2109      	movs	r1, #9
 80014b2:	5499      	strb	r1, [r3, r2]
      }
      change_state_null = 0;
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <TASK_Handle+0x668>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
    }
    sprintf((char *)string, "%d%d%d", value_threshold[0], value_threshold[1], value_threshold[2]);
 80014ba:	4b36      	ldr	r3, [pc, #216]	; (8001594 <TASK_Handle+0x670>)
 80014bc:	f993 3000 	ldrsb.w	r3, [r3]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <TASK_Handle+0x670>)
 80014c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <TASK_Handle+0x670>)
 80014cc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	460b      	mov	r3, r1
 80014d4:	4930      	ldr	r1, [pc, #192]	; (8001598 <TASK_Handle+0x674>)
 80014d6:	4831      	ldr	r0, [pc, #196]	; (800159c <TASK_Handle+0x678>)
 80014d8:	f003 fc82 	bl	8004de0 <siprintf>
    SSD1306_GotoXY(75, 20);
 80014dc:	2114      	movs	r1, #20
 80014de:	204b      	movs	r0, #75	; 0x4b
 80014e0:	f003 fb22 	bl	8004b28 <SSD1306_GotoXY>
    SSD1306_Puts((char *)string, &Font_7x10, 1);
 80014e4:	2201      	movs	r2, #1
 80014e6:	4922      	ldr	r1, [pc, #136]	; (8001570 <TASK_Handle+0x64c>)
 80014e8:	482c      	ldr	r0, [pc, #176]	; (800159c <TASK_Handle+0x678>)
 80014ea:	f003 fbb3 	bl	8004c54 <SSD1306_Puts>
    
    if ((state_button == state_mode) && (change_state_null == 1))
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <TASK_Handle+0x664>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d10c      	bne.n	8001512 <TASK_Handle+0x5ee>
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <TASK_Handle+0x668>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d108      	bne.n	8001512 <TASK_Handle+0x5ee>
    {
      flag_screen = 1;
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <TASK_Handle+0x644>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
      state_machine = STATE_START;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <TASK_Handle+0x67c>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
      change_state_null = 0;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <TASK_Handle+0x668>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_set) && (change_state_null == 1))
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <TASK_Handle+0x664>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b06      	cmp	r3, #6
 800151a:	d159      	bne.n	80015d0 <TASK_Handle+0x6ac>
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <TASK_Handle+0x668>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d155      	bne.n	80015d0 <TASK_Handle+0x6ac>
    {
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <TASK_Handle+0x648>)
 8001526:	f993 3000 	ldrsb.w	r3, [r3]
 800152a:	461a      	mov	r2, r3
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <TASK_Handle+0x658>)
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	b29b      	uxth	r3, r3
 8001532:	211e      	movs	r1, #30
 8001534:	4618      	mov	r0, r3
 8001536:	f003 faf7 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts(" ", &Font_7x10, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <TASK_Handle+0x64c>)
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <TASK_Handle+0x66c>)
 8001540:	f003 fb88 	bl	8004c54 <SSD1306_Puts>
      value_threshold_setting = value_threshold[0] * 100 +  value_threshold[1] * 10 + value_threshold[2];
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <TASK_Handle+0x670>)
 8001546:	f993 3000 	ldrsb.w	r3, [r3]
 800154a:	b29b      	uxth	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4413      	add	r3, r2
 8001552:	461a      	mov	r2, r3
 8001554:	0091      	lsls	r1, r2, #2
 8001556:	461a      	mov	r2, r3
 8001558:	460b      	mov	r3, r1
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <TASK_Handle+0x670>)
 8001562:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001566:	e01d      	b.n	80015a4 <TASK_Handle+0x680>
 8001568:	2000000d 	.word	0x2000000d
 800156c:	20000132 	.word	0x20000132
 8001570:	2000001c 	.word	0x2000001c
 8001574:	080057cc 	.word	0x080057cc
 8001578:	080057fc 	.word	0x080057fc
 800157c:	20000008 	.word	0x20000008
 8001580:	08005808 	.word	0x08005808
 8001584:	20000134 	.word	0x20000134
 8001588:	2000011d 	.word	0x2000011d
 800158c:	2000000c 	.word	0x2000000c
 8001590:	08005760 	.word	0x08005760
 8001594:	2000012c 	.word	0x2000012c
 8001598:	0800580c 	.word	0x0800580c
 800159c:	20000120 	.word	0x20000120
 80015a0:	2000011e 	.word	0x2000011e
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	0089      	lsls	r1, r1, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <TASK_Handle+0x6fc>)
 80015b6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4413      	add	r3, r2
 80015be:	b29a      	uxth	r2, r3
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <TASK_Handle+0x700>)
 80015c2:	801a      	strh	r2, [r3, #0]
      flag_enable_threshold = 1;
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <TASK_Handle+0x704>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
      change_state_null = 0;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <TASK_Handle+0x708>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
    }

    if(flag_enable_threshold == 1)
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <TASK_Handle+0x704>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d11f      	bne.n	8001618 <TASK_Handle+0x6f4>
    {
      if(value_threshold_setting <= value)
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <TASK_Handle+0x700>)
 80015da:	881a      	ldrh	r2, [r3, #0]
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <TASK_Handle+0x70c>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d80c      	bhi.n	8001600 <TASK_Handle+0x6dc>
      {
        HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <TASK_Handle+0x710>)
 80015ee:	f001 fd05 	bl	8002ffc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f8:	480f      	ldr	r0, [pc, #60]	; (8001638 <TASK_Handle+0x714>)
 80015fa:	f001 fcff 	bl	8002ffc <HAL_GPIO_WritePin>
 80015fe:	e00b      	b.n	8001618 <TASK_Handle+0x6f4>
      }
      else
      {
        HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001606:	480b      	ldr	r0, [pc, #44]	; (8001634 <TASK_Handle+0x710>)
 8001608:	f001 fcf8 	bl	8002ffc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <TASK_Handle+0x714>)
 8001614:	f001 fcf2 	bl	8002ffc <HAL_GPIO_WritePin>
      }
    }
    SSD1306_UpdateScreen();
 8001618:	f003 f9e2 	bl	80049e0 <SSD1306_UpdateScreen>
    break;
 800161c:	e1e3      	b.n	80019e6 <TASK_Handle+0xac2>
 800161e:	bf00      	nop
 8001620:	2000012c 	.word	0x2000012c
 8001624:	20000130 	.word	0x20000130
 8001628:	20000134 	.word	0x20000134
 800162c:	2000000c 	.word	0x2000000c
 8001630:	20000004 	.word	0x20000004
 8001634:	40010c00 	.word	0x40010c00
 8001638:	40010800 	.word	0x40010800

  case STATE_2_THRESHOLD:
    if (flag_screen == 1)
 800163c:	4bac      	ldr	r3, [pc, #688]	; (80018f0 <TASK_Handle+0x9cc>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d12f      	bne.n	80016a4 <TASK_Handle+0x780>
    {
      digit_position = 0;
 8001644:	4bab      	ldr	r3, [pc, #684]	; (80018f4 <TASK_Handle+0x9d0>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
      SSD1306_Clear();
 800164a:	f003 fb28 	bl	8004c9e <SSD1306_Clear>
      SSD1306_GotoXY(20, 0);
 800164e:	2100      	movs	r1, #0
 8001650:	2014      	movs	r0, #20
 8001652:	f003 fa69 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("EV:10-1000", &Font_7x10, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	49a7      	ldr	r1, [pc, #668]	; (80018f8 <TASK_Handle+0x9d4>)
 800165a:	48a8      	ldr	r0, [pc, #672]	; (80018fc <TASK_Handle+0x9d8>)
 800165c:	f003 fafa 	bl	8004c54 <SSD1306_Puts>
      SSD1306_GotoXY(0, 20);
 8001660:	2114      	movs	r1, #20
 8001662:	2000      	movs	r0, #0
 8001664:	f003 fa60 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("SET VALUE:", &Font_7x10, 1);
 8001668:	2201      	movs	r2, #1
 800166a:	49a3      	ldr	r1, [pc, #652]	; (80018f8 <TASK_Handle+0x9d4>)
 800166c:	48a4      	ldr	r0, [pc, #656]	; (8001900 <TASK_Handle+0x9dc>)
 800166e:	f003 faf1 	bl	8004c54 <SSD1306_Puts>
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 8001672:	4ba0      	ldr	r3, [pc, #640]	; (80018f4 <TASK_Handle+0x9d0>)
 8001674:	f993 3000 	ldrsb.w	r3, [r3]
 8001678:	461a      	mov	r2, r3
 800167a:	4ba2      	ldr	r3, [pc, #648]	; (8001904 <TASK_Handle+0x9e0>)
 800167c:	5c9b      	ldrb	r3, [r3, r2]
 800167e:	b29b      	uxth	r3, r3
 8001680:	211e      	movs	r1, #30
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fa50 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("^", &Font_7x10, 1);
 8001688:	2201      	movs	r2, #1
 800168a:	499b      	ldr	r1, [pc, #620]	; (80018f8 <TASK_Handle+0x9d4>)
 800168c:	489e      	ldr	r0, [pc, #632]	; (8001908 <TASK_Handle+0x9e4>)
 800168e:	f003 fae1 	bl	8004c54 <SSD1306_Puts>
      flag_screen = 0;
 8001692:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <TASK_Handle+0x9cc>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
      flag_enable_threshold = 0;
 8001698:	4b9c      	ldr	r3, [pc, #624]	; (800190c <TASK_Handle+0x9e8>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
      value_threshold_setting = 0;
 800169e:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <TASK_Handle+0x9ec>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	801a      	strh	r2, [r3, #0]
    }

    if ((state_button == state_left) && (change_state_null == 1))
 80016a4:	4b9b      	ldr	r3, [pc, #620]	; (8001914 <TASK_Handle+0x9f0>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d138      	bne.n	8001720 <TASK_Handle+0x7fc>
 80016ae:	4b9a      	ldr	r3, [pc, #616]	; (8001918 <TASK_Handle+0x9f4>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d134      	bne.n	8001720 <TASK_Handle+0x7fc>
    {
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 80016b6:	4b8f      	ldr	r3, [pc, #572]	; (80018f4 <TASK_Handle+0x9d0>)
 80016b8:	f993 3000 	ldrsb.w	r3, [r3]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b91      	ldr	r3, [pc, #580]	; (8001904 <TASK_Handle+0x9e0>)
 80016c0:	5c9b      	ldrb	r3, [r3, r2]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	211e      	movs	r1, #30
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 fa2e 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts(" ", &Font_7x10, 1);
 80016cc:	2201      	movs	r2, #1
 80016ce:	498a      	ldr	r1, [pc, #552]	; (80018f8 <TASK_Handle+0x9d4>)
 80016d0:	4892      	ldr	r0, [pc, #584]	; (800191c <TASK_Handle+0x9f8>)
 80016d2:	f003 fabf 	bl	8004c54 <SSD1306_Puts>
      digit_position = digit_position - 1;
 80016d6:	4b87      	ldr	r3, [pc, #540]	; (80018f4 <TASK_Handle+0x9d0>)
 80016d8:	f993 3000 	ldrsb.w	r3, [r3]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	3b01      	subs	r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	b25a      	sxtb	r2, r3
 80016e4:	4b83      	ldr	r3, [pc, #524]	; (80018f4 <TASK_Handle+0x9d0>)
 80016e6:	701a      	strb	r2, [r3, #0]
      if (digit_position == -1)
 80016e8:	4b82      	ldr	r3, [pc, #520]	; (80018f4 <TASK_Handle+0x9d0>)
 80016ea:	f993 3000 	ldrsb.w	r3, [r3]
 80016ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f2:	d102      	bne.n	80016fa <TASK_Handle+0x7d6>
      {
        digit_position = 3;
 80016f4:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <TASK_Handle+0x9d0>)
 80016f6:	2203      	movs	r2, #3
 80016f8:	701a      	strb	r2, [r3, #0]
      }
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 80016fa:	4b7e      	ldr	r3, [pc, #504]	; (80018f4 <TASK_Handle+0x9d0>)
 80016fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001700:	461a      	mov	r2, r3
 8001702:	4b80      	ldr	r3, [pc, #512]	; (8001904 <TASK_Handle+0x9e0>)
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	b29b      	uxth	r3, r3
 8001708:	211e      	movs	r1, #30
 800170a:	4618      	mov	r0, r3
 800170c:	f003 fa0c 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("^", &Font_7x10, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	4979      	ldr	r1, [pc, #484]	; (80018f8 <TASK_Handle+0x9d4>)
 8001714:	487c      	ldr	r0, [pc, #496]	; (8001908 <TASK_Handle+0x9e4>)
 8001716:	f003 fa9d 	bl	8004c54 <SSD1306_Puts>
      change_state_null = 0;
 800171a:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <TASK_Handle+0x9f4>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_right) && (change_state_null == 1))
 8001720:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <TASK_Handle+0x9f0>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b05      	cmp	r3, #5
 8001728:	d137      	bne.n	800179a <TASK_Handle+0x876>
 800172a:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <TASK_Handle+0x9f4>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d133      	bne.n	800179a <TASK_Handle+0x876>
    {
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 8001732:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <TASK_Handle+0x9d0>)
 8001734:	f993 3000 	ldrsb.w	r3, [r3]
 8001738:	461a      	mov	r2, r3
 800173a:	4b72      	ldr	r3, [pc, #456]	; (8001904 <TASK_Handle+0x9e0>)
 800173c:	5c9b      	ldrb	r3, [r3, r2]
 800173e:	b29b      	uxth	r3, r3
 8001740:	211e      	movs	r1, #30
 8001742:	4618      	mov	r0, r3
 8001744:	f003 f9f0 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts(" ", &Font_7x10, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	496b      	ldr	r1, [pc, #428]	; (80018f8 <TASK_Handle+0x9d4>)
 800174c:	4873      	ldr	r0, [pc, #460]	; (800191c <TASK_Handle+0x9f8>)
 800174e:	f003 fa81 	bl	8004c54 <SSD1306_Puts>
      digit_position = digit_position + 1;
 8001752:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <TASK_Handle+0x9d0>)
 8001754:	f993 3000 	ldrsb.w	r3, [r3]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b25a      	sxtb	r2, r3
 8001760:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <TASK_Handle+0x9d0>)
 8001762:	701a      	strb	r2, [r3, #0]
      if (digit_position == 4)
 8001764:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <TASK_Handle+0x9d0>)
 8001766:	f993 3000 	ldrsb.w	r3, [r3]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d102      	bne.n	8001774 <TASK_Handle+0x850>
      {
        digit_position = 0;
 800176e:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <TASK_Handle+0x9d0>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
      }
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <TASK_Handle+0x9d0>)
 8001776:	f993 3000 	ldrsb.w	r3, [r3]
 800177a:	461a      	mov	r2, r3
 800177c:	4b61      	ldr	r3, [pc, #388]	; (8001904 <TASK_Handle+0x9e0>)
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	b29b      	uxth	r3, r3
 8001782:	211e      	movs	r1, #30
 8001784:	4618      	mov	r0, r3
 8001786:	f003 f9cf 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts("^", &Font_7x10, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	495a      	ldr	r1, [pc, #360]	; (80018f8 <TASK_Handle+0x9d4>)
 800178e:	485e      	ldr	r0, [pc, #376]	; (8001908 <TASK_Handle+0x9e4>)
 8001790:	f003 fa60 	bl	8004c54 <SSD1306_Puts>
      change_state_null = 0;
 8001794:	4b60      	ldr	r3, [pc, #384]	; (8001918 <TASK_Handle+0x9f4>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
    }
    
    if ((state_button == state_up) && (change_state_null == 1))
 800179a:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <TASK_Handle+0x9f0>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d125      	bne.n	80017f0 <TASK_Handle+0x8cc>
 80017a4:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <TASK_Handle+0x9f4>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d121      	bne.n	80017f0 <TASK_Handle+0x8cc>
    {
      value_threshold[digit_position] = value_threshold[digit_position] + 1;
 80017ac:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <TASK_Handle+0x9d0>)
 80017ae:	f993 3000 	ldrsb.w	r3, [r3]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <TASK_Handle+0x9fc>)
 80017b6:	569b      	ldrsb	r3, [r3, r2]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2d9      	uxtb	r1, r3
 80017be:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <TASK_Handle+0x9d0>)
 80017c0:	f993 3000 	ldrsb.w	r3, [r3]
 80017c4:	461a      	mov	r2, r3
 80017c6:	b249      	sxtb	r1, r1
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <TASK_Handle+0x9fc>)
 80017ca:	5499      	strb	r1, [r3, r2]
      if (value_threshold[digit_position] == 10)
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <TASK_Handle+0x9d0>)
 80017ce:	f993 3000 	ldrsb.w	r3, [r3]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b52      	ldr	r3, [pc, #328]	; (8001920 <TASK_Handle+0x9fc>)
 80017d6:	569b      	ldrsb	r3, [r3, r2]
 80017d8:	2b0a      	cmp	r3, #10
 80017da:	d106      	bne.n	80017ea <TASK_Handle+0x8c6>
      {
        value_threshold[digit_position] = 0;
 80017dc:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <TASK_Handle+0x9d0>)
 80017de:	f993 3000 	ldrsb.w	r3, [r3]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <TASK_Handle+0x9fc>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	5499      	strb	r1, [r3, r2]
      }
      
      change_state_null = 0;
 80017ea:	4b4b      	ldr	r3, [pc, #300]	; (8001918 <TASK_Handle+0x9f4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_down) && (change_state_null == 1))
 80017f0:	4b48      	ldr	r3, [pc, #288]	; (8001914 <TASK_Handle+0x9f0>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d126      	bne.n	8001848 <TASK_Handle+0x924>
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <TASK_Handle+0x9f4>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d122      	bne.n	8001848 <TASK_Handle+0x924>
    {
      value_threshold[digit_position] = value_threshold[digit_position] - 1;
 8001802:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <TASK_Handle+0x9d0>)
 8001804:	f993 3000 	ldrsb.w	r3, [r3]
 8001808:	461a      	mov	r2, r3
 800180a:	4b45      	ldr	r3, [pc, #276]	; (8001920 <TASK_Handle+0x9fc>)
 800180c:	569b      	ldrsb	r3, [r3, r2]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3b01      	subs	r3, #1
 8001812:	b2d9      	uxtb	r1, r3
 8001814:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <TASK_Handle+0x9d0>)
 8001816:	f993 3000 	ldrsb.w	r3, [r3]
 800181a:	461a      	mov	r2, r3
 800181c:	b249      	sxtb	r1, r1
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <TASK_Handle+0x9fc>)
 8001820:	5499      	strb	r1, [r3, r2]
      if (value_threshold[digit_position] == -1)
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <TASK_Handle+0x9d0>)
 8001824:	f993 3000 	ldrsb.w	r3, [r3]
 8001828:	461a      	mov	r2, r3
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <TASK_Handle+0x9fc>)
 800182c:	569b      	ldrsb	r3, [r3, r2]
 800182e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001832:	d106      	bne.n	8001842 <TASK_Handle+0x91e>
      {
        value_threshold[digit_position] = 9;
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <TASK_Handle+0x9d0>)
 8001836:	f993 3000 	ldrsb.w	r3, [r3]
 800183a:	461a      	mov	r2, r3
 800183c:	4b38      	ldr	r3, [pc, #224]	; (8001920 <TASK_Handle+0x9fc>)
 800183e:	2109      	movs	r1, #9
 8001840:	5499      	strb	r1, [r3, r2]
      }
      change_state_null = 0;
 8001842:	4b35      	ldr	r3, [pc, #212]	; (8001918 <TASK_Handle+0x9f4>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
    }

    sprintf((char *)string, "%d%d%d%d", value_threshold[0], value_threshold[1], value_threshold[2], value_threshold[3]);
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <TASK_Handle+0x9fc>)
 800184a:	f993 3000 	ldrsb.w	r3, [r3]
 800184e:	4619      	mov	r1, r3
 8001850:	4b33      	ldr	r3, [pc, #204]	; (8001920 <TASK_Handle+0x9fc>)
 8001852:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001856:	4618      	mov	r0, r3
 8001858:	4b31      	ldr	r3, [pc, #196]	; (8001920 <TASK_Handle+0x9fc>)
 800185a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800185e:	461a      	mov	r2, r3
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <TASK_Handle+0x9fc>)
 8001862:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	9200      	str	r2, [sp, #0]
 800186a:	4603      	mov	r3, r0
 800186c:	460a      	mov	r2, r1
 800186e:	492d      	ldr	r1, [pc, #180]	; (8001924 <TASK_Handle+0xa00>)
 8001870:	482d      	ldr	r0, [pc, #180]	; (8001928 <TASK_Handle+0xa04>)
 8001872:	f003 fab5 	bl	8004de0 <siprintf>
    SSD1306_GotoXY(75, 20);
 8001876:	2114      	movs	r1, #20
 8001878:	204b      	movs	r0, #75	; 0x4b
 800187a:	f003 f955 	bl	8004b28 <SSD1306_GotoXY>
    SSD1306_Puts((char *)string, &Font_7x10, 1);
 800187e:	2201      	movs	r2, #1
 8001880:	491d      	ldr	r1, [pc, #116]	; (80018f8 <TASK_Handle+0x9d4>)
 8001882:	4829      	ldr	r0, [pc, #164]	; (8001928 <TASK_Handle+0xa04>)
 8001884:	f003 f9e6 	bl	8004c54 <SSD1306_Puts>
    

    if ((state_button == state_mode) && (change_state_null == 1))
 8001888:	4b22      	ldr	r3, [pc, #136]	; (8001914 <TASK_Handle+0x9f0>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d10c      	bne.n	80018ac <TASK_Handle+0x988>
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <TASK_Handle+0x9f4>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d108      	bne.n	80018ac <TASK_Handle+0x988>
    {
      flag_screen = 1;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <TASK_Handle+0x9cc>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
      state_machine = STATE_START;
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <TASK_Handle+0xa08>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
      change_state_null = 0;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <TASK_Handle+0x9f4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
    }

    if ((state_button == state_set) && (change_state_null == 1))
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <TASK_Handle+0x9f0>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d169      	bne.n	800198a <TASK_Handle+0xa66>
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <TASK_Handle+0x9f4>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d165      	bne.n	800198a <TASK_Handle+0xa66>
    {
      SSD1306_GotoXY(digit_position_display[digit_position], 30);
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <TASK_Handle+0x9d0>)
 80018c0:	f993 3000 	ldrsb.w	r3, [r3]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <TASK_Handle+0x9e0>)
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	211e      	movs	r1, #30
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 f92a 	bl	8004b28 <SSD1306_GotoXY>
      SSD1306_Puts(" ", &Font_7x10, 1);
 80018d4:	2201      	movs	r2, #1
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <TASK_Handle+0x9d4>)
 80018d8:	4810      	ldr	r0, [pc, #64]	; (800191c <TASK_Handle+0x9f8>)
 80018da:	f003 f9bb 	bl	8004c54 <SSD1306_Puts>
      value_threshold_setting = value_threshold[0] * 1000 +  value_threshold[1] * 100 + value_threshold[2] * 10 + value_threshold[3];
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <TASK_Handle+0x9fc>)
 80018e0:	f993 3000 	ldrsb.w	r3, [r3]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	0152      	lsls	r2, r2, #5
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	e020      	b.n	8001930 <TASK_Handle+0xa0c>
 80018ee:	bf00      	nop
 80018f0:	2000000d 	.word	0x2000000d
 80018f4:	20000132 	.word	0x20000132
 80018f8:	2000001c 	.word	0x2000001c
 80018fc:	080057e4 	.word	0x080057e4
 8001900:	080057fc 	.word	0x080057fc
 8001904:	20000008 	.word	0x20000008
 8001908:	08005808 	.word	0x08005808
 800190c:	20000134 	.word	0x20000134
 8001910:	20000130 	.word	0x20000130
 8001914:	2000011d 	.word	0x2000011d
 8001918:	2000000c 	.word	0x2000000c
 800191c:	08005760 	.word	0x08005760
 8001920:	2000012c 	.word	0x2000012c
 8001924:	08005814 	.word	0x08005814
 8001928:	20000120 	.word	0x20000120
 800192c:	2000011e 	.word	0x2000011e
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <TASK_Handle+0xac8>)
 800193a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4619      	mov	r1, r3
 8001942:	0089      	lsls	r1, r1, #2
 8001944:	440b      	add	r3, r1
 8001946:	4619      	mov	r1, r3
 8001948:	0088      	lsls	r0, r1, #2
 800194a:	4619      	mov	r1, r3
 800194c:	4603      	mov	r3, r0
 800194e:	440b      	add	r3, r1
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	b29b      	uxth	r3, r3
 8001954:	4413      	add	r3, r2
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <TASK_Handle+0xac8>)
 800195a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800195e:	b29b      	uxth	r3, r3
 8001960:	4619      	mov	r1, r3
 8001962:	0089      	lsls	r1, r1, #2
 8001964:	440b      	add	r3, r1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	b29b      	uxth	r3, r3
 800196a:	4413      	add	r3, r2
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <TASK_Handle+0xac8>)
 8001970:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4413      	add	r3, r2
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <TASK_Handle+0xacc>)
 800197c:	801a      	strh	r2, [r3, #0]
      flag_enable_threshold = 1;
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <TASK_Handle+0xad0>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
      change_state_null = 0;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <TASK_Handle+0xad4>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
    }
    
    if(flag_enable_threshold == 1)
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <TASK_Handle+0xad0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d11f      	bne.n	80019d2 <TASK_Handle+0xaae>
    {
      if(value_threshold_setting <= value)
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <TASK_Handle+0xacc>)
 8001994:	881a      	ldrh	r2, [r3, #0]
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <TASK_Handle+0xad8>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	429a      	cmp	r2, r3
 800199e:	d80c      	bhi.n	80019ba <TASK_Handle+0xa96>
      {
        HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a6:	4816      	ldr	r0, [pc, #88]	; (8001a00 <TASK_Handle+0xadc>)
 80019a8:	f001 fb28 	bl	8002ffc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b2:	4814      	ldr	r0, [pc, #80]	; (8001a04 <TASK_Handle+0xae0>)
 80019b4:	f001 fb22 	bl	8002ffc <HAL_GPIO_WritePin>
 80019b8:	e00b      	b.n	80019d2 <TASK_Handle+0xaae>
      }
      else
      {
        HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, 1);
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c0:	480f      	ldr	r0, [pc, #60]	; (8001a00 <TASK_Handle+0xadc>)
 80019c2:	f001 fb1b 	bl	8002ffc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <TASK_Handle+0xae0>)
 80019ce:	f001 fb15 	bl	8002ffc <HAL_GPIO_WritePin>
      }
    }
    SSD1306_UpdateScreen();
 80019d2:	f003 f805 	bl	80049e0 <SSD1306_UpdateScreen>
    break;
 80019d6:	e006      	b.n	80019e6 <TASK_Handle+0xac2>
  default:
    break;
 80019d8:	bf00      	nop
 80019da:	e004      	b.n	80019e6 <TASK_Handle+0xac2>
    break;
 80019dc:	bf00      	nop
 80019de:	e002      	b.n	80019e6 <TASK_Handle+0xac2>
    break;
 80019e0:	bf00      	nop
 80019e2:	e000      	b.n	80019e6 <TASK_Handle+0xac2>
    break;
 80019e4:	bf00      	nop
  }
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000012c 	.word	0x2000012c
 80019f0:	20000130 	.word	0x20000130
 80019f4:	20000134 	.word	0x20000134
 80019f8:	2000000c 	.word	0x2000000c
 80019fc:	20000004 	.word	0x20000004
 8001a00:	40010c00 	.word	0x40010c00
 8001a04:	40010800 	.word	0x40010800

08001a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a0e:	f000 fbaf 	bl	8002170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a12:	f000 f947 	bl	8001ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a16:	f000 fa01 	bl	8001e1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a1a:	f000 f9d1 	bl	8001dc0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001a1e:	f000 f991 	bl	8001d44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001a22:	f002 ff19 	bl	8004858 <SSD1306_Init>
  DISPLAY_Init();
 8001a26:	f7ff f9dd 	bl	8000de4 <DISPLAY_Init>
  /* USER CODE END 2 */
uint32_t timer = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, 1);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a34:	4892      	ldr	r0, [pc, #584]	; (8001c80 <main+0x278>)
 8001a36:	f001 fae1 	bl	8002ffc <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     state_button = button_detect();
 8001a3a:	f002 fef3 	bl	8004824 <button_detect>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b90      	ldr	r3, [pc, #576]	; (8001c84 <main+0x27c>)
 8001a44:	701a      	strb	r2, [r3, #0]
     STATE_BUTTON_Handle();
 8001a46:	f7ff fa4d 	bl	8000ee4 <STATE_BUTTON_Handle>
     TASK_Handle();
 8001a4a:	f7ff fa6b 	bl	8000f24 <TASK_Handle>

     if(HAL_GetTick() - timer > 500)
 8001a4e:	f000 fbe7 	bl	8002220 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a5c:	d9ed      	bls.n	8001a3a <main+0x32>
     {
    	 HAL_ADC_Start(&hadc1);
 8001a5e:	488a      	ldr	r0, [pc, #552]	; (8001c88 <main+0x280>)
 8001a60:	f000 fce4 	bl	800242c <HAL_ADC_Start>
    	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	4887      	ldr	r0, [pc, #540]	; (8001c88 <main+0x280>)
 8001a6a:	f000 fdb9 	bl	80025e0 <HAL_ADC_PollForConversion>
		if((state_machine == STATE_1_MEASURE) || (state_machine == STATE_1_THRESHOLD))
 8001a6e:	4b87      	ldr	r3, [pc, #540]	; (8001c8c <main+0x284>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d003      	beq.n	8001a7e <main+0x76>
 8001a76:	4b85      	ldr	r3, [pc, #532]	; (8001c8c <main+0x284>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d158      	bne.n	8001b30 <main+0x128>
		{
			votage = (float)(HAL_ADC_GetValue(&hadc1)) * 2.2 / 4096;
 8001a7e:	4882      	ldr	r0, [pc, #520]	; (8001c88 <main+0x280>)
 8001a80:	f000 feb4 	bl	80027ec <HAL_ADC_GetValue>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f90a 	bl	8000ca0 <__aeabi_ui2f>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd76 	bl	8000580 <__aeabi_f2d>
 8001a94:	a36e      	add	r3, pc, #440	; (adr r3, 8001c50 <main+0x248>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fdc9 	bl	8000630 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	4b79      	ldr	r3, [pc, #484]	; (8001c90 <main+0x288>)
 8001aac:	f7fe feea 	bl	8000884 <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7fe ffec 	bl	8000a94 <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a75      	ldr	r2, [pc, #468]	; (8001c94 <main+0x28c>)
 8001ac0:	6013      	str	r3, [r2, #0]
			HAL_ADC_Stop(&hadc1);
 8001ac2:	4871      	ldr	r0, [pc, #452]	; (8001c88 <main+0x280>)
 8001ac4:	f000 fd60 	bl	8002588 <HAL_ADC_Stop>

			value = (uint16_t)((22.3 - (votage * 10)) / 0.0498);
 8001ac8:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <main+0x28c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4972      	ldr	r1, [pc, #456]	; (8001c98 <main+0x290>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fb3e 	bl	8000150 <__aeabi_fmul>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd52 	bl	8000580 <__aeabi_f2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	a15d      	add	r1, pc, #372	; (adr r1, 8001c58 <main+0x250>)
 8001ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae6:	f7fe fbeb 	bl	80002c0 <__aeabi_dsub>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	a35b      	add	r3, pc, #364	; (adr r3, 8001c60 <main+0x258>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fec4 	bl	8000884 <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7fe ffa6 	bl	8000a54 <__aeabi_d2uiz>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <main+0x294>)
 8001b0e:	801a      	strh	r2, [r3, #0]
			if(value > 100) value = 100;
 8001b10:	4b62      	ldr	r3, [pc, #392]	; (8001c9c <main+0x294>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d902      	bls.n	8001b20 <main+0x118>
 8001b1a:	4b60      	ldr	r3, [pc, #384]	; (8001c9c <main+0x294>)
 8001b1c:	2264      	movs	r2, #100	; 0x64
 8001b1e:	801a      	strh	r2, [r3, #0]
			if(value < 10)  value = 10;
 8001b20:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <main+0x294>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	d802      	bhi.n	8001b30 <main+0x128>
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	; (8001c9c <main+0x294>)
 8001b2c:	220a      	movs	r2, #10
 8001b2e:	801a      	strh	r2, [r3, #0]
		}
		if((state_machine == STATE_2_MEASURE) || (state_machine == STATE_2_THRESHOLD))
 8001b30:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <main+0x284>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d004      	beq.n	8001b42 <main+0x13a>
 8001b38:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <main+0x284>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	f040 8081 	bne.w	8001c44 <main+0x23c>
		{
			votage = (float)(HAL_ADC_GetValue(&hadc1)) * 0.9 / 4096;
 8001b42:	4851      	ldr	r0, [pc, #324]	; (8001c88 <main+0x280>)
 8001b44:	f000 fe52 	bl	80027ec <HAL_ADC_GetValue>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f8a8 	bl	8000ca0 <__aeabi_ui2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd14 	bl	8000580 <__aeabi_f2d>
 8001b58:	a343      	add	r3, pc, #268	; (adr r3, 8001c68 <main+0x260>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd67 	bl	8000630 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b48      	ldr	r3, [pc, #288]	; (8001c90 <main+0x288>)
 8001b70:	f7fe fe88 	bl	8000884 <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe ff8a 	bl	8000a94 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <main+0x28c>)
 8001b84:	6013      	str	r3, [r2, #0]
			HAL_ADC_Stop(&hadc1);
 8001b86:	4840      	ldr	r0, [pc, #256]	; (8001c88 <main+0x280>)
 8001b88:	f000 fcfe 	bl	8002588 <HAL_ADC_Stop>
			value = (uint16_t)((4.7 - (votage*10)) / 0.00102);
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <main+0x28c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4941      	ldr	r1, [pc, #260]	; (8001c98 <main+0x290>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fadc 	bl	8000150 <__aeabi_fmul>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcf0 	bl	8000580 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	a132      	add	r1, pc, #200	; (adr r1, 8001c70 <main+0x268>)
 8001ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001baa:	f7fe fb89 	bl	80002c0 <__aeabi_dsub>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	a330      	add	r3, pc, #192	; (adr r3, 8001c78 <main+0x270>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fe62 	bl	8000884 <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ff44 	bl	8000a54 <__aeabi_d2uiz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <main+0x294>)
 8001bd2:	801a      	strh	r2, [r3, #0]

			// round
			uint8_t DV = value % 10;
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <main+0x294>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <main+0x298>)
 8001bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8001be0:	08d9      	lsrs	r1, r3, #3
 8001be2:	460b      	mov	r3, r1
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	70fb      	strb	r3, [r7, #3]
			if (DV >= 5) value = value + (10 - DV);
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d90b      	bls.n	8001c0e <main+0x206>
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <main+0x294>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	330a      	adds	r3, #10
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <main+0x294>)
 8001c0a:	801a      	strh	r2, [r3, #0]
 8001c0c:	e008      	b.n	8001c20 <main+0x218>
			else         value = value - DV;
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <main+0x294>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <main+0x294>)
 8001c1e:	801a      	strh	r2, [r3, #0]
			if(value > 1000) value = 1000;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <main+0x294>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c2a:	d903      	bls.n	8001c34 <main+0x22c>
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <main+0x294>)
 8001c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c32:	801a      	strh	r2, [r3, #0]
			if(value < 10)  value = 10;
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <main+0x294>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b09      	cmp	r3, #9
 8001c3c:	d802      	bhi.n	8001c44 <main+0x23c>
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <main+0x294>)
 8001c40:	220a      	movs	r2, #10
 8001c42:	801a      	strh	r2, [r3, #0]
		}
		timer = HAL_GetTick();
 8001c44:	f000 faec 	bl	8002220 <HAL_GetTick>
 8001c48:	6078      	str	r0, [r7, #4]
     state_button = button_detect();
 8001c4a:	e6f6      	b.n	8001a3a <main+0x32>
 8001c4c:	f3af 8000 	nop.w
 8001c50:	9999999a 	.word	0x9999999a
 8001c54:	40019999 	.word	0x40019999
 8001c58:	cccccccd 	.word	0xcccccccd
 8001c5c:	40364ccc 	.word	0x40364ccc
 8001c60:	b6ae7d56 	.word	0xb6ae7d56
 8001c64:	3fa97f62 	.word	0x3fa97f62
 8001c68:	cccccccd 	.word	0xcccccccd
 8001c6c:	3feccccc 	.word	0x3feccccc
 8001c70:	cccccccd 	.word	0xcccccccd
 8001c74:	4012cccc 	.word	0x4012cccc
 8001c78:	a91537a0 	.word	0xa91537a0
 8001c7c:	3f50b630 	.word	0x3f50b630
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	2000011d 	.word	0x2000011d
 8001c88:	20000098 	.word	0x20000098
 8001c8c:	2000011e 	.word	0x2000011e
 8001c90:	40b00000 	.word	0x40b00000
 8001c94:	20000138 	.word	0x20000138
 8001c98:	41200000 	.word	0x41200000
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	cccccccd 	.word	0xcccccccd

08001ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b094      	sub	sp, #80	; 0x50
 8001ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cae:	2228      	movs	r2, #40	; 0x28
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 f8b4 	bl	8004e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cdc:	2310      	movs	r3, #16
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 ff69 	bl	8003bc0 <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001cf4:	f000 f900 	bl	8001ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 f9d6 	bl	80040c4 <HAL_RCC_ClockConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001d1e:	f000 f8eb 	bl	8001ef8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d22:	2302      	movs	r3, #2
 8001d24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 fb57 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d38:	f000 f8de 	bl	8001ef8 <Error_Handler>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3750      	adds	r7, #80	; 0x50
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <MX_ADC1_Init+0x74>)
 8001d56:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <MX_ADC1_Init+0x78>)
 8001d58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_ADC1_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <MX_ADC1_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_ADC1_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <MX_ADC1_Init+0x74>)
 8001d6e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <MX_ADC1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_ADC1_Init+0x74>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_ADC1_Init+0x74>)
 8001d82:	f000 fa7b 	bl	800227c <HAL_ADC_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001d8c:	f000 f8b4 	bl	8001ef8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_ADC1_Init+0x74>)
 8001da2:	f000 fd2f 	bl	8002804 <HAL_ADC_ConfigChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001dac:	f000 f8a4 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000098 	.word	0x20000098
 8001dbc:	40012400 	.word	0x40012400

08001dc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <MX_I2C1_Init+0x54>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_I2C1_Init+0x58>)
 8001dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dfe:	f001 f915 	bl	800302c <HAL_I2C_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e08:	f000 f876 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200000c8 	.word	0x200000c8
 8001e14:	40005400 	.word	0x40005400
 8001e18:	00061a80 	.word	0x00061a80

08001e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <MX_GPIO_Init+0xd0>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a2d      	ldr	r2, [pc, #180]	; (8001eec <MX_GPIO_Init+0xd0>)
 8001e36:	f043 0320 	orr.w	r3, r3, #32
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <MX_GPIO_Init+0xd0>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <MX_GPIO_Init+0xd0>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <MX_GPIO_Init+0xd0>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6193      	str	r3, [r2, #24]
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <MX_GPIO_Init+0xd0>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <MX_GPIO_Init+0xd0>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a21      	ldr	r2, [pc, #132]	; (8001eec <MX_GPIO_Init+0xd0>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_GPIO_Init+0xd0>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CHANGE_RESISTOR_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8001e7e:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <MX_GPIO_Init+0xd4>)
 8001e80:	f001 f8bc 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_INFOR_GPIO_Port, LED_INFOR_Pin, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e8a:	481a      	ldr	r0, [pc, #104]	; (8001ef4 <MX_GPIO_Init+0xd8>)
 8001e8c:	f001 f8b6 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_LEFT_Pin SW_MODE_Pin SW_DOWN_Pin SW_UP_Pin
                           SW_RIGHT_Pin SW_SET_Pin */
  GPIO_InitStruct.Pin = SW_LEFT_Pin|SW_MODE_Pin|SW_DOWN_Pin|SW_UP_Pin
 8001e90:	237e      	movs	r3, #126	; 0x7e
 8001e92:	613b      	str	r3, [r7, #16]
                          |SW_RIGHT_Pin|SW_SET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4813      	ldr	r0, [pc, #76]	; (8001ef0 <MX_GPIO_Init+0xd4>)
 8001ea4:	f000 ff26 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHANGE_RESISTOR_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = CHANGE_RESISTOR_Pin|BUZZER_Pin;
 8001ea8:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <MX_GPIO_Init+0xd4>)
 8001ec2:	f000 ff17 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_INFOR_Pin */
  GPIO_InitStruct.Pin = LED_INFOR_Pin;
 8001ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_INFOR_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	4619      	mov	r1, r3
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_GPIO_Init+0xd8>)
 8001ee0:	f000 ff08 	bl	8002cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	40010c00 	.word	0x40010c00

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efc:	b672      	cpsid	i
}
 8001efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <Error_Handler+0x8>
	...

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6193      	str	r3, [r2, #24]
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_MspInit+0x60>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_MspInit+0x60>)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000

08001f68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <HAL_ADC_MspInit+0x6c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d121      	bne.n	8001fcc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_ADC_MspInit+0x70>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_ADC_MspInit+0x70>)
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_ADC_MspInit+0x70>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_ADC_MspInit+0x70>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_ADC_MspInit+0x70>)
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_ADC_MspInit+0x70>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <HAL_ADC_MspInit+0x74>)
 8001fc8:	f000 fe94 	bl	8002cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40012400 	.word	0x40012400
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010800 	.word	0x40010800

08001fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <HAL_I2C_MspInit+0x70>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d123      	bne.n	8002048 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_I2C_MspInit+0x74>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a13      	ldr	r2, [pc, #76]	; (8002054 <HAL_I2C_MspInit+0x74>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_I2C_MspInit+0x74>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002018:	23c0      	movs	r3, #192	; 0xc0
 800201a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201c:	2312      	movs	r3, #18
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	480b      	ldr	r0, [pc, #44]	; (8002058 <HAL_I2C_MspInit+0x78>)
 800202c:	f000 fe62 	bl	8002cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_I2C_MspInit+0x74>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	4a07      	ldr	r2, [pc, #28]	; (8002054 <HAL_I2C_MspInit+0x74>)
 8002036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800203a:	61d3      	str	r3, [r2, #28]
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_I2C_MspInit+0x74>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40005400 	.word	0x40005400
 8002054:	40021000 	.word	0x40021000
 8002058:	40010c00 	.word	0x40010c00

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <NMI_Handler+0x4>

08002062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <MemManage_Handler+0x4>

0800206e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <BusFault_Handler+0x4>

08002074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <UsageFault_Handler+0x4>

0800207a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a2:	f000 f8ab 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <_sbrk+0x5c>)
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <_sbrk+0x60>)
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <_sbrk+0x64>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <_sbrk+0x68>)
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d207      	bcs.n	80020ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020dc:	f002 fea8 	bl	8004e30 <__errno>
 80020e0:	4603      	mov	r3, r0
 80020e2:	220c      	movs	r2, #12
 80020e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	e009      	b.n	8002100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <_sbrk+0x64>)
 80020fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20005000 	.word	0x20005000
 800210c:	00000400 	.word	0x00000400
 8002110:	2000013c 	.word	0x2000013c
 8002114:	200006a0 	.word	0x200006a0

08002118 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */

}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
   bl  SystemInit
 8002124:	f7ff fff8 	bl	8002118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800212a:	490c      	ldr	r1, [pc, #48]	; (800215c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <LoopFillZerobss+0x16>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002140:	4c09      	ldr	r4, [pc, #36]	; (8002168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214e:	f002 fe75 	bl	8004e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002152:	f7ff fc59 	bl	8001a08 <main>
  bx lr
 8002156:	4770      	bx	lr
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002160:	08006d64 	.word	0x08006d64
  ldr r2, =_sbss
 8002164:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002168:	200006a0 	.word	0x200006a0

0800216c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC1_2_IRQHandler>
	...

08002170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_Init+0x28>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a07      	ldr	r2, [pc, #28]	; (8002198 <HAL_Init+0x28>)
 800217a:	f043 0310 	orr.w	r3, r3, #16
 800217e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002180:	2003      	movs	r0, #3
 8002182:	f000 fd83 	bl	8002c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002186:	200f      	movs	r0, #15
 8002188:	f000 f808 	bl	800219c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800218c:	f7ff feba 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40022000 	.word	0x40022000

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x54>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x58>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fd8d 	bl	8002cda <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00e      	b.n	80021e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d80a      	bhi.n	80021e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f000 fd63 	bl	8002ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_InitTick+0x5c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000010 	.word	0x20000010
 80021f4:	20000018 	.word	0x20000018
 80021f8:	20000014 	.word	0x20000014

080021fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_IncTick+0x1c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_IncTick+0x20>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a03      	ldr	r2, [pc, #12]	; (800221c <HAL_IncTick+0x20>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000018 	.word	0x20000018
 800221c:	20000140 	.word	0x20000140

08002220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b02      	ldr	r3, [pc, #8]	; (8002230 <HAL_GetTick+0x10>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000140 	.word	0x20000140

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff fff0 	bl	8002220 <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffe0 	bl	8002220 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000018 	.word	0x20000018

0800227c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0be      	b.n	800241c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fe54 	bl	8001f68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fbf1 	bl	8002aa8 <ADC_ConversionStop_Disable>
 80022c6:	4603      	mov	r3, r0
 80022c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 8099 	bne.w	800240a <HAL_ADC_Init+0x18e>
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 8095 	bne.w	800240a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e8:	f023 0302 	bic.w	r3, r3, #2
 80022ec:	f043 0202 	orr.w	r2, r3, #2
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7b1b      	ldrb	r3, [r3, #12]
 8002302:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002304:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	4313      	orrs	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002314:	d003      	beq.n	800231e <HAL_ADC_Init+0xa2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <HAL_ADC_Init+0xa8>
 800231e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002322:	e000      	b.n	8002326 <HAL_ADC_Init+0xaa>
 8002324:	2300      	movs	r3, #0
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7d1b      	ldrb	r3, [r3, #20]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d119      	bne.n	8002368 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7b1b      	ldrb	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	3b01      	subs	r3, #1
 8002342:	035a      	lsls	r2, r3, #13
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	e00b      	b.n	8002368 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	4b28      	ldr	r3, [pc, #160]	; (8002424 <HAL_ADC_Init+0x1a8>)
 8002384:	4013      	ands	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	430b      	orrs	r3, r1
 800238e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002398:	d003      	beq.n	80023a2 <HAL_ADC_Init+0x126>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d104      	bne.n	80023ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	051b      	lsls	r3, r3, #20
 80023aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	430a      	orrs	r2, r1
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_ADC_Init+0x1ac>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d10b      	bne.n	80023e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023e6:	e018      	b.n	800241a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	f023 0312 	bic.w	r3, r3, #18
 80023f0:	f043 0210 	orr.w	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002408:	e007      	b.n	800241a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800241a:	7dfb      	ldrb	r3, [r7, #23]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	ffe1f7fd 	.word	0xffe1f7fd
 8002428:	ff1f0efe 	.word	0xff1f0efe

0800242c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_ADC_Start+0x1a>
 8002442:	2302      	movs	r3, #2
 8002444:	e098      	b.n	8002578 <HAL_ADC_Start+0x14c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fad0 	bl	80029f4 <ADC_Enable>
 8002454:	4603      	mov	r3, r0
 8002456:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 8087 	bne.w	800256e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a41      	ldr	r2, [pc, #260]	; (8002580 <HAL_ADC_Start+0x154>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d105      	bne.n	800248a <HAL_ADC_Start+0x5e>
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <HAL_ADC_Start+0x158>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d115      	bne.n	80024b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d026      	beq.n	80024f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024b4:	e01d      	b.n	80024f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2f      	ldr	r2, [pc, #188]	; (8002584 <HAL_ADC_Start+0x158>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d004      	beq.n	80024d6 <HAL_ADC_Start+0xaa>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_ADC_Start+0x154>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d10d      	bne.n	80024f2 <HAL_ADC_Start+0xc6>
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_ADC_Start+0x158>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f023 0206 	bic.w	r2, r3, #6
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c
 800250a:	e002      	b.n	8002512 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f06f 0202 	mvn.w	r2, #2
 8002522:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800252e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002532:	d113      	bne.n	800255c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002538:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_ADC_Start+0x154>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d105      	bne.n	800254a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_ADC_Start+0x158>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002546:	2b00      	cmp	r3, #0
 8002548:	d108      	bne.n	800255c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	e00c      	b.n	8002576 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e003      	b.n	8002576 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40012800 	.word	0x40012800
 8002584:	40012400 	.word	0x40012400

08002588 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Stop+0x1a>
 800259e:	2302      	movs	r3, #2
 80025a0:	e01a      	b.n	80025d8 <HAL_ADC_Stop+0x50>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fa7c 	bl	8002aa8 <ADC_ConversionStop_Disable>
 80025b0:	4603      	mov	r3, r0
 80025b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80025f6:	f7ff fe13 	bl	8002220 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	f043 0220 	orr.w	r2, r3, #32
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0d3      	b.n	80027ca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d131      	bne.n	8002694 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800263a:	2b00      	cmp	r3, #0
 800263c:	d12a      	bne.n	8002694 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800263e:	e021      	b.n	8002684 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d01d      	beq.n	8002684 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <HAL_ADC_PollForConversion+0x7e>
 800264e:	f7ff fde7 	bl	8002220 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d212      	bcs.n	8002684 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	f043 0204 	orr.w	r2, r3, #4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e0a2      	b.n	80027ca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0d6      	beq.n	8002640 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002692:	e070      	b.n	8002776 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002694:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <HAL_ADC_PollForConversion+0x1f4>)
 8002696:	681c      	ldr	r4, [r3, #0]
 8002698:	2002      	movs	r0, #2
 800269a:	f001 ff57 	bl	800454c <HAL_RCCEx_GetPeriphCLKFreq>
 800269e:	4603      	mov	r3, r0
 80026a0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	4b4b      	ldr	r3, [pc, #300]	; (80027d8 <HAL_ADC_PollForConversion+0x1f8>)
 80026ac:	400b      	ands	r3, r1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d118      	bne.n	80026e4 <HAL_ADC_PollForConversion+0x104>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68d9      	ldr	r1, [r3, #12]
 80026b8:	4b48      	ldr	r3, [pc, #288]	; (80027dc <HAL_ADC_PollForConversion+0x1fc>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d111      	bne.n	80026e4 <HAL_ADC_PollForConversion+0x104>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6919      	ldr	r1, [r3, #16]
 80026c6:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_ADC_PollForConversion+0x200>)
 80026c8:	400b      	ands	r3, r1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <HAL_ADC_PollForConversion+0x100>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68d9      	ldr	r1, [r3, #12]
 80026d4:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <HAL_ADC_PollForConversion+0x204>)
 80026d6:	400b      	ands	r3, r1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_PollForConversion+0x100>
 80026dc:	2314      	movs	r3, #20
 80026de:	e020      	b.n	8002722 <HAL_ADC_PollForConversion+0x142>
 80026e0:	2329      	movs	r3, #41	; 0x29
 80026e2:	e01e      	b.n	8002722 <HAL_ADC_PollForConversion+0x142>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6919      	ldr	r1, [r3, #16]
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_ADC_PollForConversion+0x200>)
 80026ec:	400b      	ands	r3, r1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_PollForConversion+0x120>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68d9      	ldr	r1, [r3, #12]
 80026f8:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <HAL_ADC_PollForConversion+0x204>)
 80026fa:	400b      	ands	r3, r1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <HAL_ADC_PollForConversion+0x13c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6919      	ldr	r1, [r3, #16]
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_ADC_PollForConversion+0x208>)
 8002708:	400b      	ands	r3, r1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d108      	bne.n	8002720 <HAL_ADC_PollForConversion+0x140>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_ADC_PollForConversion+0x208>)
 8002716:	400b      	ands	r3, r1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_PollForConversion+0x140>
 800271c:	2354      	movs	r3, #84	; 0x54
 800271e:	e000      	b.n	8002722 <HAL_ADC_PollForConversion+0x142>
 8002720:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002728:	e021      	b.n	800276e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d01a      	beq.n	8002768 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_ADC_PollForConversion+0x168>
 8002738:	f7ff fd72 	bl	8002220 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d20f      	bcs.n	8002768 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	429a      	cmp	r2, r3
 800274e:	d90b      	bls.n	8002768 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f043 0204 	orr.w	r2, r3, #4
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e030      	b.n	80027ca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	429a      	cmp	r2, r3
 8002774:	d8d9      	bhi.n	800272a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f06f 0212 	mvn.w	r2, #18
 800277e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002796:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800279a:	d115      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000010 	.word	0x20000010
 80027d8:	24924924 	.word	0x24924924
 80027dc:	00924924 	.word	0x00924924
 80027e0:	12492492 	.word	0x12492492
 80027e4:	00492492 	.word	0x00492492
 80027e8:	00249249 	.word	0x00249249

080027ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x20>
 8002820:	2302      	movs	r3, #2
 8002822:	e0dc      	b.n	80029de <HAL_ADC_ConfigChannel+0x1da>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b06      	cmp	r3, #6
 8002832:	d81c      	bhi.n	800286e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b05      	subs	r3, #5
 8002846:	221f      	movs	r2, #31
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	4019      	ands	r1, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	3b05      	subs	r3, #5
 8002860:	fa00 f203 	lsl.w	r2, r0, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	635a      	str	r2, [r3, #52]	; 0x34
 800286c:	e03c      	b.n	80028e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b0c      	cmp	r3, #12
 8002874:	d81c      	bhi.n	80028b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	3b23      	subs	r3, #35	; 0x23
 8002888:	221f      	movs	r2, #31
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	4019      	ands	r1, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	3b23      	subs	r3, #35	; 0x23
 80028a2:	fa00 f203 	lsl.w	r2, r0, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
 80028ae:	e01b      	b.n	80028e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b41      	subs	r3, #65	; 0x41
 80028c2:	221f      	movs	r2, #31
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	4019      	ands	r1, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	3b41      	subs	r3, #65	; 0x41
 80028dc:	fa00 f203 	lsl.w	r2, r0, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d91c      	bls.n	800292a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68d9      	ldr	r1, [r3, #12]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	3b1e      	subs	r3, #30
 8002902:	2207      	movs	r2, #7
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	4019      	ands	r1, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6898      	ldr	r0, [r3, #8]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	3b1e      	subs	r3, #30
 800291c:	fa00 f203 	lsl.w	r2, r0, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	e019      	b.n	800295e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6919      	ldr	r1, [r3, #16]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	2207      	movs	r2, #7
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	4019      	ands	r1, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6898      	ldr	r0, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b10      	cmp	r3, #16
 8002964:	d003      	beq.n	800296e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800296a:	2b11      	cmp	r3, #17
 800296c:	d132      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d125      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d126      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002994:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b10      	cmp	r3, #16
 800299c:	d11a      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <HAL_ADC_ConfigChannel+0x1e8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	0c9a      	lsrs	r2, r3, #18
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029b4:	e002      	b.n	80029bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f9      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x1b2>
 80029c2:	e007      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	40012400 	.word	0x40012400
 80029ec:	20000010 	.word	0x20000010
 80029f0:	431bde83 	.word	0x431bde83

080029f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d040      	beq.n	8002a94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <ADC_Enable+0xac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <ADC_Enable+0xb0>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	0c9b      	lsrs	r3, r3, #18
 8002a2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a30:	e002      	b.n	8002a38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f9      	bne.n	8002a32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a3e:	f7ff fbef 	bl	8002220 <HAL_GetTick>
 8002a42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a44:	e01f      	b.n	8002a86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a46:	f7ff fbeb 	bl	8002220 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d918      	bls.n	8002a86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d011      	beq.n	8002a86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	f043 0210 	orr.w	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d1d8      	bne.n	8002a46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000010 	.word	0x20000010
 8002aa4:	431bde83 	.word	0x431bde83

08002aa8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d12e      	bne.n	8002b20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ad2:	f7ff fba5 	bl	8002220 <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ad8:	e01b      	b.n	8002b12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ada:	f7ff fba1 	bl	8002220 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d914      	bls.n	8002b12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10d      	bne.n	8002b12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	f043 0210 	orr.w	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e007      	b.n	8002b22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d0dc      	beq.n	8002ada <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f7ff ff90 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff49 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb4:	f7ff ff5e 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff90 	bl	8002be4 <NVIC_EncodePriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff5f 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ffb0 	bl	8002c48 <SysTick_Config>
 8002ce8:	4603      	mov	r3, r0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b08b      	sub	sp, #44	; 0x2c
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d06:	e169      	b.n	8002fdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	f040 8158 	bne.w	8002fd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4a9a      	ldr	r2, [pc, #616]	; (8002f94 <HAL_GPIO_Init+0x2a0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d05e      	beq.n	8002dee <HAL_GPIO_Init+0xfa>
 8002d30:	4a98      	ldr	r2, [pc, #608]	; (8002f94 <HAL_GPIO_Init+0x2a0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d875      	bhi.n	8002e22 <HAL_GPIO_Init+0x12e>
 8002d36:	4a98      	ldr	r2, [pc, #608]	; (8002f98 <HAL_GPIO_Init+0x2a4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d058      	beq.n	8002dee <HAL_GPIO_Init+0xfa>
 8002d3c:	4a96      	ldr	r2, [pc, #600]	; (8002f98 <HAL_GPIO_Init+0x2a4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d86f      	bhi.n	8002e22 <HAL_GPIO_Init+0x12e>
 8002d42:	4a96      	ldr	r2, [pc, #600]	; (8002f9c <HAL_GPIO_Init+0x2a8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d052      	beq.n	8002dee <HAL_GPIO_Init+0xfa>
 8002d48:	4a94      	ldr	r2, [pc, #592]	; (8002f9c <HAL_GPIO_Init+0x2a8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d869      	bhi.n	8002e22 <HAL_GPIO_Init+0x12e>
 8002d4e:	4a94      	ldr	r2, [pc, #592]	; (8002fa0 <HAL_GPIO_Init+0x2ac>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d04c      	beq.n	8002dee <HAL_GPIO_Init+0xfa>
 8002d54:	4a92      	ldr	r2, [pc, #584]	; (8002fa0 <HAL_GPIO_Init+0x2ac>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d863      	bhi.n	8002e22 <HAL_GPIO_Init+0x12e>
 8002d5a:	4a92      	ldr	r2, [pc, #584]	; (8002fa4 <HAL_GPIO_Init+0x2b0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d046      	beq.n	8002dee <HAL_GPIO_Init+0xfa>
 8002d60:	4a90      	ldr	r2, [pc, #576]	; (8002fa4 <HAL_GPIO_Init+0x2b0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d85d      	bhi.n	8002e22 <HAL_GPIO_Init+0x12e>
 8002d66:	2b12      	cmp	r3, #18
 8002d68:	d82a      	bhi.n	8002dc0 <HAL_GPIO_Init+0xcc>
 8002d6a:	2b12      	cmp	r3, #18
 8002d6c:	d859      	bhi.n	8002e22 <HAL_GPIO_Init+0x12e>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_GPIO_Init+0x80>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002def 	.word	0x08002def
 8002d78:	08002dc9 	.word	0x08002dc9
 8002d7c:	08002ddb 	.word	0x08002ddb
 8002d80:	08002e1d 	.word	0x08002e1d
 8002d84:	08002e23 	.word	0x08002e23
 8002d88:	08002e23 	.word	0x08002e23
 8002d8c:	08002e23 	.word	0x08002e23
 8002d90:	08002e23 	.word	0x08002e23
 8002d94:	08002e23 	.word	0x08002e23
 8002d98:	08002e23 	.word	0x08002e23
 8002d9c:	08002e23 	.word	0x08002e23
 8002da0:	08002e23 	.word	0x08002e23
 8002da4:	08002e23 	.word	0x08002e23
 8002da8:	08002e23 	.word	0x08002e23
 8002dac:	08002e23 	.word	0x08002e23
 8002db0:	08002e23 	.word	0x08002e23
 8002db4:	08002e23 	.word	0x08002e23
 8002db8:	08002dd1 	.word	0x08002dd1
 8002dbc:	08002de5 	.word	0x08002de5
 8002dc0:	4a79      	ldr	r2, [pc, #484]	; (8002fa8 <HAL_GPIO_Init+0x2b4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dc6:	e02c      	b.n	8002e22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	623b      	str	r3, [r7, #32]
          break;
 8002dce:	e029      	b.n	8002e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	623b      	str	r3, [r7, #32]
          break;
 8002dd8:	e024      	b.n	8002e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	3308      	adds	r3, #8
 8002de0:	623b      	str	r3, [r7, #32]
          break;
 8002de2:	e01f      	b.n	8002e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	330c      	adds	r3, #12
 8002dea:	623b      	str	r3, [r7, #32]
          break;
 8002dec:	e01a      	b.n	8002e24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002df6:	2304      	movs	r3, #4
 8002df8:	623b      	str	r3, [r7, #32]
          break;
 8002dfa:	e013      	b.n	8002e24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e04:	2308      	movs	r3, #8
 8002e06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	611a      	str	r2, [r3, #16]
          break;
 8002e0e:	e009      	b.n	8002e24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e10:	2308      	movs	r3, #8
 8002e12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	615a      	str	r2, [r3, #20]
          break;
 8002e1a:	e003      	b.n	8002e24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	623b      	str	r3, [r7, #32]
          break;
 8002e20:	e000      	b.n	8002e24 <HAL_GPIO_Init+0x130>
          break;
 8002e22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2bff      	cmp	r3, #255	; 0xff
 8002e28:	d801      	bhi.n	8002e2e <HAL_GPIO_Init+0x13a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	e001      	b.n	8002e32 <HAL_GPIO_Init+0x13e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2bff      	cmp	r3, #255	; 0xff
 8002e38:	d802      	bhi.n	8002e40 <HAL_GPIO_Init+0x14c>
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	e002      	b.n	8002e46 <HAL_GPIO_Init+0x152>
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	3b08      	subs	r3, #8
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	210f      	movs	r1, #15
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	401a      	ands	r2, r3
 8002e58:	6a39      	ldr	r1, [r7, #32]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	431a      	orrs	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80b1 	beq.w	8002fd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <HAL_GPIO_Init+0x2b8>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	4a4c      	ldr	r2, [pc, #304]	; (8002fac <HAL_GPIO_Init+0x2b8>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6193      	str	r3, [r2, #24]
 8002e80:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_GPIO_Init+0x2b8>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e8c:	4a48      	ldr	r2, [pc, #288]	; (8002fb0 <HAL_GPIO_Init+0x2bc>)
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	3302      	adds	r3, #2
 8002e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a40      	ldr	r2, [pc, #256]	; (8002fb4 <HAL_GPIO_Init+0x2c0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_GPIO_Init+0x1ec>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3f      	ldr	r2, [pc, #252]	; (8002fb8 <HAL_GPIO_Init+0x2c4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00d      	beq.n	8002edc <HAL_GPIO_Init+0x1e8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3e      	ldr	r2, [pc, #248]	; (8002fbc <HAL_GPIO_Init+0x2c8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <HAL_GPIO_Init+0x1e4>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a3d      	ldr	r2, [pc, #244]	; (8002fc0 <HAL_GPIO_Init+0x2cc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_GPIO_Init+0x1e0>
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e006      	b.n	8002ee2 <HAL_GPIO_Init+0x1ee>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	e004      	b.n	8002ee2 <HAL_GPIO_Init+0x1ee>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e002      	b.n	8002ee2 <HAL_GPIO_Init+0x1ee>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_GPIO_Init+0x1ee>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	f002 0203 	and.w	r2, r2, #3
 8002ee8:	0092      	lsls	r2, r2, #2
 8002eea:	4093      	lsls	r3, r2
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ef2:	492f      	ldr	r1, [pc, #188]	; (8002fb0 <HAL_GPIO_Init+0x2bc>)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	492c      	ldr	r1, [pc, #176]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4928      	ldr	r1, [pc, #160]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d006      	beq.n	8002f42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f34:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	4922      	ldr	r1, [pc, #136]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60cb      	str	r3, [r1, #12]
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f42:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	491e      	ldr	r1, [pc, #120]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	4918      	ldr	r1, [pc, #96]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	4914      	ldr	r1, [pc, #80]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d021      	beq.n	8002fc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	490e      	ldr	r1, [pc, #56]	; (8002fc4 <HAL_GPIO_Init+0x2d0>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
 8002f90:	e021      	b.n	8002fd6 <HAL_GPIO_Init+0x2e2>
 8002f92:	bf00      	nop
 8002f94:	10320000 	.word	0x10320000
 8002f98:	10310000 	.word	0x10310000
 8002f9c:	10220000 	.word	0x10220000
 8002fa0:	10210000 	.word	0x10210000
 8002fa4:	10120000 	.word	0x10120000
 8002fa8:	10110000 	.word	0x10110000
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40010800 	.word	0x40010800
 8002fb8:	40010c00 	.word	0x40010c00
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	40011400 	.word	0x40011400
 8002fc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	4909      	ldr	r1, [pc, #36]	; (8002ff8 <HAL_GPIO_Init+0x304>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	3301      	adds	r3, #1
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f47f ae8e 	bne.w	8002d08 <HAL_GPIO_Init+0x14>
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	372c      	adds	r7, #44	; 0x2c
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	40010400 	.word	0x40010400

08002ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
 8003008:	4613      	mov	r3, r2
 800300a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800300c:	787b      	ldrb	r3, [r7, #1]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003018:	e003      	b.n	8003022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	041a      	lsls	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e12b      	b.n	8003296 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe ffc4 	bl	8001fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800307e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800308e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003090:	f001 f960 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a81      	ldr	r2, [pc, #516]	; (80032a0 <HAL_I2C_Init+0x274>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d807      	bhi.n	80030b0 <HAL_I2C_Init+0x84>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a80      	ldr	r2, [pc, #512]	; (80032a4 <HAL_I2C_Init+0x278>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bf94      	ite	ls
 80030a8:	2301      	movls	r3, #1
 80030aa:	2300      	movhi	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e006      	b.n	80030be <HAL_I2C_Init+0x92>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a7d      	ldr	r2, [pc, #500]	; (80032a8 <HAL_I2C_Init+0x27c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bf94      	ite	ls
 80030b8:	2301      	movls	r3, #1
 80030ba:	2300      	movhi	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0e7      	b.n	8003296 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a78      	ldr	r2, [pc, #480]	; (80032ac <HAL_I2C_Init+0x280>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0c9b      	lsrs	r3, r3, #18
 80030d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_I2C_Init+0x274>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d802      	bhi.n	8003100 <HAL_I2C_Init+0xd4>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3301      	adds	r3, #1
 80030fe:	e009      	b.n	8003114 <HAL_I2C_Init+0xe8>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	4a69      	ldr	r2, [pc, #420]	; (80032b0 <HAL_I2C_Init+0x284>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	3301      	adds	r3, #1
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	495c      	ldr	r1, [pc, #368]	; (80032a0 <HAL_I2C_Init+0x274>)
 8003130:	428b      	cmp	r3, r1
 8003132:	d819      	bhi.n	8003168 <HAL_I2C_Init+0x13c>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003142:	1c59      	adds	r1, r3, #1
 8003144:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003148:	400b      	ands	r3, r1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_I2C_Init+0x138>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e59      	subs	r1, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fbb1 f3f3 	udiv	r3, r1, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003162:	e051      	b.n	8003208 <HAL_I2C_Init+0x1dc>
 8003164:	2304      	movs	r3, #4
 8003166:	e04f      	b.n	8003208 <HAL_I2C_Init+0x1dc>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d111      	bne.n	8003194 <HAL_I2C_Init+0x168>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e012      	b.n	80031ba <HAL_I2C_Init+0x18e>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e58      	subs	r0, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	0099      	lsls	r1, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031aa:	3301      	adds	r3, #1
 80031ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Init+0x196>
 80031be:	2301      	movs	r3, #1
 80031c0:	e022      	b.n	8003208 <HAL_I2C_Init+0x1dc>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10e      	bne.n	80031e8 <HAL_I2C_Init+0x1bc>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1e58      	subs	r0, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	440b      	add	r3, r1
 80031d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031dc:	3301      	adds	r3, #1
 80031de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e6:	e00f      	b.n	8003208 <HAL_I2C_Init+0x1dc>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e58      	subs	r0, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	0099      	lsls	r1, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	6809      	ldr	r1, [r1, #0]
 800320c:	4313      	orrs	r3, r2
 800320e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6911      	ldr	r1, [r2, #16]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68d2      	ldr	r2, [r2, #12]
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	430b      	orrs	r3, r1
 800324a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	000186a0 	.word	0x000186a0
 80032a4:	001e847f 	.word	0x001e847f
 80032a8:	003d08ff 	.word	0x003d08ff
 80032ac:	431bde83 	.word	0x431bde83
 80032b0:	10624dd3 	.word	0x10624dd3

080032b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	461a      	mov	r2, r3
 80032c0:	460b      	mov	r3, r1
 80032c2:	817b      	strh	r3, [r7, #10]
 80032c4:	4613      	mov	r3, r2
 80032c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032c8:	f7fe ffaa 	bl	8002220 <HAL_GetTick>
 80032cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	f040 80e0 	bne.w	800349c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2319      	movs	r3, #25
 80032e2:	2201      	movs	r2, #1
 80032e4:	4970      	ldr	r1, [pc, #448]	; (80034a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fa92 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0d3      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_I2C_Master_Transmit+0x50>
 8003300:	2302      	movs	r3, #2
 8003302:	e0cc      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b01      	cmp	r3, #1
 8003318:	d007      	beq.n	800332a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003338:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2221      	movs	r2, #33	; 0x21
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2210      	movs	r2, #16
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	893a      	ldrh	r2, [r7, #8]
 800335a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a50      	ldr	r2, [pc, #320]	; (80034ac <HAL_I2C_Master_Transmit+0x1f8>)
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800336c:	8979      	ldrh	r1, [r7, #10]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	6a3a      	ldr	r2, [r7, #32]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f9ca 	bl	800370c <I2C_MasterRequestWrite>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e08d      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003398:	e066      	b.n	8003468 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	6a39      	ldr	r1, [r7, #32]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fb50 	bl	8003a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00d      	beq.n	80033c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d107      	bne.n	80033c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e06b      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d11b      	bne.n	800343c <HAL_I2C_Master_Transmit+0x188>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	2b00      	cmp	r3, #0
 800340a:	d017      	beq.n	800343c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	6a39      	ldr	r1, [r7, #32]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fb47 	bl	8003ad4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2b04      	cmp	r3, #4
 8003452:	d107      	bne.n	8003464 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003462:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e01a      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d194      	bne.n	800339a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	00100002 	.word	0x00100002
 80034ac:	ffff0000 	.word	0xffff0000

080034b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	460b      	mov	r3, r1
 80034be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7fe feae 	bl	8002220 <HAL_GetTick>
 80034c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	f040 8111 	bne.w	80036fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2319      	movs	r3, #25
 80034de:	2201      	movs	r2, #1
 80034e0:	4988      	ldr	r1, [pc, #544]	; (8003704 <HAL_I2C_IsDeviceReady+0x254>)
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f994 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
 80034f0:	e104      	b.n	80036fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_I2C_IsDeviceReady+0x50>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e0fd      	b.n	80036fc <HAL_I2C_IsDeviceReady+0x24c>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b01      	cmp	r3, #1
 8003514:	d007      	beq.n	8003526 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003534:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2224      	movs	r2, #36	; 0x24
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a70      	ldr	r2, [pc, #448]	; (8003708 <HAL_I2C_IsDeviceReady+0x258>)
 8003548:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003558:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2200      	movs	r2, #0
 8003562:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f952 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00d      	beq.n	800358e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003580:	d103      	bne.n	800358a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e0b6      	b.n	80036fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800359c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800359e:	f7fe fe3f 	bl	8002220 <HAL_GetTick>
 80035a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035d2:	e025      	b.n	8003620 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035d4:	f7fe fe24 	bl	8002220 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <HAL_I2C_IsDeviceReady+0x13a>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	22a0      	movs	r2, #160	; 0xa0
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2ba0      	cmp	r3, #160	; 0xa0
 800362a:	d005      	beq.n	8003638 <HAL_I2C_IsDeviceReady+0x188>
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_I2C_IsDeviceReady+0x188>
 8003632:	7dbb      	ldrb	r3, [r7, #22]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0cd      	beq.n	80035d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d129      	bne.n	80036a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2319      	movs	r3, #25
 800367a:	2201      	movs	r2, #1
 800367c:	4921      	ldr	r1, [pc, #132]	; (8003704 <HAL_I2C_IsDeviceReady+0x254>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f8c6 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e036      	b.n	80036fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e02c      	b.n	80036fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2319      	movs	r3, #25
 80036c2:	2201      	movs	r2, #1
 80036c4:	490f      	ldr	r1, [pc, #60]	; (8003704 <HAL_I2C_IsDeviceReady+0x254>)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f8a2 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e012      	b.n	80036fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3301      	adds	r3, #1
 80036da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	f4ff af32 	bcc.w	800354a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036fa:	2302      	movs	r3, #2
  }
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	00100002 	.word	0x00100002
 8003708:	ffff0000 	.word	0xffff0000

0800370c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	460b      	mov	r3, r1
 800371a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d006      	beq.n	8003736 <I2C_MasterRequestWrite+0x2a>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d003      	beq.n	8003736 <I2C_MasterRequestWrite+0x2a>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003734:	d108      	bne.n	8003748 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e00b      	b.n	8003760 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	2b12      	cmp	r3, #18
 800374e:	d107      	bne.n	8003760 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f84f 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003786:	d103      	bne.n	8003790 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e035      	b.n	8003800 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800379c:	d108      	bne.n	80037b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800379e:	897b      	ldrh	r3, [r7, #10]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037ac:	611a      	str	r2, [r3, #16]
 80037ae:	e01b      	b.n	80037e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037b0:	897b      	ldrh	r3, [r7, #10]
 80037b2:	11db      	asrs	r3, r3, #7
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f003 0306 	and.w	r3, r3, #6
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f063 030f 	orn	r3, r3, #15
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	490e      	ldr	r1, [pc, #56]	; (8003808 <I2C_MasterRequestWrite+0xfc>)
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f898 	bl	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e010      	b.n	8003800 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037de:	897b      	ldrh	r3, [r7, #10]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4907      	ldr	r1, [pc, #28]	; (800380c <I2C_MasterRequestWrite+0x100>)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f888 	bl	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	00010008 	.word	0x00010008
 800380c:	00010002 	.word	0x00010002

08003810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003820:	e048      	b.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d044      	beq.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fe fcf9 	bl	8002220 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d302      	bcc.n	8003840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d139      	bne.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d10d      	bne.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x56>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	43da      	mvns	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4013      	ands	r3, r2
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	e00c      	b.n	8003880 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	43da      	mvns	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	4013      	ands	r3, r2
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	429a      	cmp	r2, r3
 8003884:	d116      	bne.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e023      	b.n	80038fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10d      	bne.n	80038da <I2C_WaitOnFlagUntilTimeout+0xca>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	43da      	mvns	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	e00c      	b.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	43da      	mvns	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4013      	ands	r3, r2
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d093      	beq.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003912:	e071      	b.n	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003922:	d123      	bne.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003932:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800393c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f043 0204 	orr.w	r2, r3, #4
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e067      	b.n	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d041      	beq.n	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003974:	f7fe fc54 	bl	8002220 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d302      	bcc.n	800398a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d136      	bne.n	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d10c      	bne.n	80039ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	43da      	mvns	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bf14      	ite	ne
 80039a6:	2301      	movne	r3, #1
 80039a8:	2300      	moveq	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e00b      	b.n	80039c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	43da      	mvns	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d016      	beq.n	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e021      	b.n	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	0c1b      	lsrs	r3, r3, #16
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d10c      	bne.n	8003a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e00b      	b.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	43da      	mvns	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bf14      	ite	ne
 8003a2e:	2301      	movne	r3, #1
 8003a30:	2300      	moveq	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f af6d 	bne.w	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a50:	e034      	b.n	8003abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f886 	bl	8003b64 <I2C_IsAcknowledgeFailed>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e034      	b.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d028      	beq.n	8003abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fe fbd9 	bl	8002220 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11d      	bne.n	8003abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	d016      	beq.n	8003abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e007      	b.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	d1c3      	bne.n	8003a52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ae0:	e034      	b.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f83e 	bl	8003b64 <I2C_IsAcknowledgeFailed>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e034      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d028      	beq.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fe fb91 	bl	8002220 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11d      	bne.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d016      	beq.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e007      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d1c3      	bne.n	8003ae2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7a:	d11b      	bne.n	8003bb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0204 	orr.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e272      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8087 	beq.w	8003cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003be0:	4b92      	ldr	r3, [pc, #584]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d00c      	beq.n	8003c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bec:	4b8f      	ldr	r3, [pc, #572]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d112      	bne.n	8003c1e <HAL_RCC_OscConfig+0x5e>
 8003bf8:	4b8c      	ldr	r3, [pc, #560]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d10b      	bne.n	8003c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c06:	4b89      	ldr	r3, [pc, #548]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d06c      	beq.n	8003cec <HAL_RCC_OscConfig+0x12c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d168      	bne.n	8003cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e24c      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c26:	d106      	bne.n	8003c36 <HAL_RCC_OscConfig+0x76>
 8003c28:	4b80      	ldr	r3, [pc, #512]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a7f      	ldr	r2, [pc, #508]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e02e      	b.n	8003c94 <HAL_RCC_OscConfig+0xd4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x98>
 8003c3e:	4b7b      	ldr	r3, [pc, #492]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7a      	ldr	r2, [pc, #488]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b78      	ldr	r3, [pc, #480]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a77      	ldr	r2, [pc, #476]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e01d      	b.n	8003c94 <HAL_RCC_OscConfig+0xd4>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0xbc>
 8003c62:	4b72      	ldr	r3, [pc, #456]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a71      	ldr	r2, [pc, #452]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6e      	ldr	r2, [pc, #440]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCC_OscConfig+0xd4>
 8003c7c:	4b6b      	ldr	r3, [pc, #428]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6a      	ldr	r2, [pc, #424]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b68      	ldr	r3, [pc, #416]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a67      	ldr	r2, [pc, #412]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d013      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fe fac0 	bl	8002220 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fe fabc 	bl	8002220 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e200      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xe4>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fe faac 	bl	8002220 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fe faa8 	bl	8002220 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e1ec      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cde:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x10c>
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d063      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cfa:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d06:	4b49      	ldr	r3, [pc, #292]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d11c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x18c>
 8003d12:	4b46      	ldr	r3, [pc, #280]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d116      	bne.n	8003d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	4b43      	ldr	r3, [pc, #268]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_RCC_OscConfig+0x176>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e1c0      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d36:	4b3d      	ldr	r3, [pc, #244]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4939      	ldr	r1, [pc, #228]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	e03a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d020      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d54:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCC_OscConfig+0x270>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fe fa61 	bl	8002220 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fe fa5d 	bl	8002220 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e1a1      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d74:	4b2d      	ldr	r3, [pc, #180]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d80:	4b2a      	ldr	r3, [pc, #168]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4927      	ldr	r1, [pc, #156]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]
 8003d94:	e015      	b.n	8003dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <HAL_RCC_OscConfig+0x270>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fa40 	bl	8002220 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da4:	f7fe fa3c 	bl	8002220 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e180      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d03a      	beq.n	8003e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d019      	beq.n	8003e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd6:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ddc:	f7fe fa20 	bl	8002220 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de4:	f7fe fa1c 	bl	8002220 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e160      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <HAL_RCC_OscConfig+0x26c>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e02:	2001      	movs	r0, #1
 8003e04:	f000 face 	bl	80043a4 <RCC_Delay>
 8003e08:	e01c      	b.n	8003e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e10:	f7fe fa06 	bl	8002220 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e16:	e00f      	b.n	8003e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e18:	f7fe fa02 	bl	8002220 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d908      	bls.n	8003e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e146      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	42420000 	.word	0x42420000
 8003e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	4b92      	ldr	r3, [pc, #584]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e9      	bne.n	8003e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a6 	beq.w	8003f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e52:	2300      	movs	r3, #0
 8003e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e56:	4b8b      	ldr	r3, [pc, #556]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4b88      	ldr	r3, [pc, #544]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	4a87      	ldr	r2, [pc, #540]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	61d3      	str	r3, [r2, #28]
 8003e6e:	4b85      	ldr	r3, [pc, #532]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	4b82      	ldr	r3, [pc, #520]	; (8004088 <HAL_RCC_OscConfig+0x4c8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d118      	bne.n	8003ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8a:	4b7f      	ldr	r3, [pc, #508]	; (8004088 <HAL_RCC_OscConfig+0x4c8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7e      	ldr	r2, [pc, #504]	; (8004088 <HAL_RCC_OscConfig+0x4c8>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e96:	f7fe f9c3 	bl	8002220 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9e:	f7fe f9bf 	bl	8002220 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b64      	cmp	r3, #100	; 0x64
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e103      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb0:	4b75      	ldr	r3, [pc, #468]	; (8004088 <HAL_RCC_OscConfig+0x4c8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x312>
 8003ec4:	4b6f      	ldr	r3, [pc, #444]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6213      	str	r3, [r2, #32]
 8003ed0:	e02d      	b.n	8003f2e <HAL_RCC_OscConfig+0x36e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x334>
 8003eda:	4b6a      	ldr	r3, [pc, #424]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	4a69      	ldr	r2, [pc, #420]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	6213      	str	r3, [r2, #32]
 8003ee6:	4b67      	ldr	r3, [pc, #412]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4a66      	ldr	r2, [pc, #408]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	f023 0304 	bic.w	r3, r3, #4
 8003ef0:	6213      	str	r3, [r2, #32]
 8003ef2:	e01c      	b.n	8003f2e <HAL_RCC_OscConfig+0x36e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b05      	cmp	r3, #5
 8003efa:	d10c      	bne.n	8003f16 <HAL_RCC_OscConfig+0x356>
 8003efc:	4b61      	ldr	r3, [pc, #388]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	4a60      	ldr	r2, [pc, #384]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6213      	str	r3, [r2, #32]
 8003f08:	4b5e      	ldr	r3, [pc, #376]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4a5d      	ldr	r2, [pc, #372]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6213      	str	r3, [r2, #32]
 8003f14:	e00b      	b.n	8003f2e <HAL_RCC_OscConfig+0x36e>
 8003f16:	4b5b      	ldr	r3, [pc, #364]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	4a5a      	ldr	r2, [pc, #360]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	6213      	str	r3, [r2, #32]
 8003f22:	4b58      	ldr	r3, [pc, #352]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	4a57      	ldr	r2, [pc, #348]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	f023 0304 	bic.w	r3, r3, #4
 8003f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d015      	beq.n	8003f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f36:	f7fe f973 	bl	8002220 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fe f96f 	bl	8002220 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e0b1      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ee      	beq.n	8003f3e <HAL_RCC_OscConfig+0x37e>
 8003f60:	e014      	b.n	8003f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f62:	f7fe f95d 	bl	8002220 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe f959 	bl	8002220 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e09b      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f80:	4b40      	ldr	r3, [pc, #256]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ee      	bne.n	8003f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d105      	bne.n	8003f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f92:	4b3c      	ldr	r3, [pc, #240]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8087 	beq.w	80040b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa8:	4b36      	ldr	r3, [pc, #216]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d061      	beq.n	8004078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d146      	bne.n	800404a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbc:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fe f92d 	bl	8002220 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fe f929 	bl	8002220 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e06d      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fdc:	4b29      	ldr	r3, [pc, #164]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff0:	d108      	bne.n	8004004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ff2:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4921      	ldr	r1, [pc, #132]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8004000:	4313      	orrs	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004004:	4b1f      	ldr	r3, [pc, #124]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a19      	ldr	r1, [r3, #32]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	430b      	orrs	r3, r1
 8004016:	491b      	ldr	r1, [pc, #108]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	4313      	orrs	r3, r2
 800401a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_RCC_OscConfig+0x4cc>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fe f8fd 	bl	8002220 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402a:	f7fe f8f9 	bl	8002220 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e03d      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800403c:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x46a>
 8004048:	e035      	b.n	80040b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_RCC_OscConfig+0x4cc>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004050:	f7fe f8e6 	bl	8002220 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004058:	f7fe f8e2 	bl	8002220 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e026      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_RCC_OscConfig+0x4c4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x498>
 8004076:	e01e      	b.n	80040b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d107      	bne.n	8004090 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e019      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
 8004084:	40021000 	.word	0x40021000
 8004088:	40007000 	.word	0x40007000
 800408c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_OscConfig+0x500>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000

080040c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0d0      	b.n	800427a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b6a      	ldr	r3, [pc, #424]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d910      	bls.n	8004108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b67      	ldr	r3, [pc, #412]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 0207 	bic.w	r2, r3, #7
 80040ee:	4965      	ldr	r1, [pc, #404]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b8      	b.n	800427a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a58      	ldr	r2, [pc, #352]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800412a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4a52      	ldr	r2, [pc, #328]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004142:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	494d      	ldr	r1, [pc, #308]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d040      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d115      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e073      	b.n	800427a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004192:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e06b      	b.n	800427a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a2:	4b39      	ldr	r3, [pc, #228]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4936      	ldr	r1, [pc, #216]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b4:	f7fe f834 	bl	8002220 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7fe f830 	bl	8002220 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e053      	b.n	800427a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 020c 	and.w	r2, r3, #12
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1eb      	bne.n	80041bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d210      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b24      	ldr	r3, [pc, #144]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 0207 	bic.w	r2, r3, #7
 80041fa:	4922      	ldr	r1, [pc, #136]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4916      	ldr	r1, [pc, #88]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004252:	f000 f821 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	490a      	ldr	r1, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1cc>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1d0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fd ff92 	bl	800219c <HAL_InitTick>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40022000 	.word	0x40022000
 8004288:	40021000 	.word	0x40021000
 800428c:	08005820 	.word	0x08005820
 8004290:	20000010 	.word	0x20000010
 8004294:	20000014 	.word	0x20000014

08004298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042b2:	4b1e      	ldr	r3, [pc, #120]	; (800432c <HAL_RCC_GetSysClockFreq+0x94>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d002      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x30>
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x36>
 80042c6:	e027      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ca:	613b      	str	r3, [r7, #16]
      break;
 80042cc:	e027      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	0c9b      	lsrs	r3, r3, #18
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042d8:	5cd3      	ldrb	r3, [r2, r3]
 80042da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d010      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <HAL_RCC_GetSysClockFreq+0x94>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	0c5b      	lsrs	r3, r3, #17
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	4a11      	ldr	r2, [pc, #68]	; (8004338 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042f2:	5cd3      	ldrb	r3, [r2, r3]
 80042f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <HAL_RCC_GetSysClockFreq+0x98>)
 80042fa:	fb03 f202 	mul.w	r2, r3, r2
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e004      	b.n	8004312 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0c      	ldr	r2, [pc, #48]	; (800433c <HAL_RCC_GetSysClockFreq+0xa4>)
 800430c:	fb02 f303 	mul.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	613b      	str	r3, [r7, #16]
      break;
 8004316:	e002      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RCC_GetSysClockFreq+0x98>)
 800431a:	613b      	str	r3, [r7, #16]
      break;
 800431c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431e:	693b      	ldr	r3, [r7, #16]
}
 8004320:	4618      	mov	r0, r3
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	007a1200 	.word	0x007a1200
 8004334:	08005838 	.word	0x08005838
 8004338:	08005848 	.word	0x08005848
 800433c:	003d0900 	.word	0x003d0900

08004340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004344:	4b02      	ldr	r3, [pc, #8]	; (8004350 <HAL_RCC_GetHCLKFreq+0x10>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	20000010 	.word	0x20000010

08004354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004358:	f7ff fff2 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4903      	ldr	r1, [pc, #12]	; (8004378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	08005830 	.word	0x08005830

0800437c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004380:	f7ff ffde 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8004384:	4602      	mov	r2, r0
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	0adb      	lsrs	r3, r3, #11
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	4903      	ldr	r1, [pc, #12]	; (80043a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004392:	5ccb      	ldrb	r3, [r1, r3]
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	08005830 	.word	0x08005830

080043a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <RCC_Delay+0x34>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <RCC_Delay+0x38>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	0a5b      	lsrs	r3, r3, #9
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043c0:	bf00      	nop
  }
  while (Delay --);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	60fa      	str	r2, [r7, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f9      	bne.n	80043c0 <RCC_Delay+0x1c>
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr
 80043d8:	20000010 	.word	0x20000010
 80043dc:	10624dd3 	.word	0x10624dd3

080043e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d07d      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043fc:	2300      	movs	r3, #0
 80043fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004400:	4b4f      	ldr	r3, [pc, #316]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10d      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440c:	4b4c      	ldr	r3, [pc, #304]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	4a4b      	ldr	r2, [pc, #300]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	61d3      	str	r3, [r2, #28]
 8004418:	4b49      	ldr	r3, [pc, #292]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004424:	2301      	movs	r3, #1
 8004426:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d118      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a42      	ldr	r2, [pc, #264]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800443a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004440:	f7fd feee 	bl	8002220 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	e008      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004448:	f7fd feea 	bl	8002220 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	; 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e06d      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004466:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02e      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	429a      	cmp	r2, r3
 8004482:	d027      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004484:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800448e:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004494:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800449a:	4a29      	ldr	r2, [pc, #164]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d014      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fd feb9 	bl	8002220 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b0:	e00a      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b2:	f7fd feb5 	bl	8002220 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e036      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ee      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d4:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4917      	ldr	r1, [pc, #92]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ec:	4b14      	ldr	r3, [pc, #80]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	4a13      	ldr	r2, [pc, #76]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004504:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	490b      	ldr	r1, [pc, #44]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004522:	4b07      	ldr	r3, [pc, #28]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	4904      	ldr	r1, [pc, #16]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	40007000 	.word	0x40007000
 8004548:	42420440 	.word	0x42420440

0800454c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b10      	cmp	r3, #16
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b10      	cmp	r3, #16
 8004572:	f200 808a 	bhi.w	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d045      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d075      	beq.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004582:	e082      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004584:	4b46      	ldr	r3, [pc, #280]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800458a:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d07b      	beq.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	0c9b      	lsrs	r3, r3, #18
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	4a41      	ldr	r2, [pc, #260]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d015      	beq.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045ae:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	0c5b      	lsrs	r3, r3, #17
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	4a3b      	ldr	r2, [pc, #236]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80045ba:	5cd3      	ldrb	r3, [r2, r3]
 80045bc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00d      	beq.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045c8:	4a38      	ldr	r2, [pc, #224]	; (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	e004      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4a34      	ldr	r2, [pc, #208]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045e4:	4b2e      	ldr	r3, [pc, #184]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f0:	d102      	bne.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	61bb      	str	r3, [r7, #24]
      break;
 80045f6:	e04a      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4a2d      	ldr	r2, [pc, #180]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	61bb      	str	r3, [r7, #24]
      break;
 8004606:	e042      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004618:	d108      	bne.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004624:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e01f      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004636:	d109      	bne.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004644:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e00f      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004656:	d11c      	bne.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d016      	beq.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004664:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004668:	61bb      	str	r3, [r7, #24]
      break;
 800466a:	e012      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800466c:	e011      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800466e:	f7ff fe85 	bl	800437c <HAL_RCC_GetPCLK2Freq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	0b9b      	lsrs	r3, r3, #14
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	3301      	adds	r3, #1
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	fbb2 f3f3 	udiv	r3, r2, r3
 8004686:	61bb      	str	r3, [r7, #24]
      break;
 8004688:	e004      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004692:	bf00      	nop
    }
  }
  return (frequency);
 8004694:	69bb      	ldr	r3, [r7, #24]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000
 80046a4:	0800584c 	.word	0x0800584c
 80046a8:	0800585c 	.word	0x0800585c
 80046ac:	007a1200 	.word	0x007a1200
 80046b0:	003d0900 	.word	0x003d0900
 80046b4:	aaaaaaab 	.word	0xaaaaaaab

080046b8 <BUTTON_Handle>:
		break;
	}
}

static void BUTTON_Handle(uint8_t state_pin, state_button_t *state)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	71fb      	strb	r3, [r7, #7]
	// detecting
	uint8_t temp_state = state_pin;
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	73fb      	strb	r3, [r7, #15]
	if(temp_state != deboucing_state)
 80046c8:	4b50      	ldr	r3, [pc, #320]	; (800480c <BUTTON_Handle+0x154>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d00a      	beq.n	80046e8 <BUTTON_Handle+0x30>
	{
		deboucing_state = temp_state;
 80046d2:	4a4e      	ldr	r2, [pc, #312]	; (800480c <BUTTON_Handle+0x154>)
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	7013      	strb	r3, [r2, #0]
		deboucing_timer = HAL_GetTick();
 80046d8:	f7fd fda2 	bl	8002220 <HAL_GetTick>
 80046dc:	4603      	mov	r3, r0
 80046de:	4a4c      	ldr	r2, [pc, #304]	; (8004810 <BUTTON_Handle+0x158>)
 80046e0:	6013      	str	r3, [r2, #0]
		is_deboucing = 1;
 80046e2:	4b4c      	ldr	r3, [pc, #304]	; (8004814 <BUTTON_Handle+0x15c>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]
	}

	// debouncing
	if(is_deboucing == 1 && (HAL_GetTick() - deboucing_timer) > 15)
 80046e8:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <BUTTON_Handle+0x15c>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10e      	bne.n	800470e <BUTTON_Handle+0x56>
 80046f0:	f7fd fd96 	bl	8002220 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b46      	ldr	r3, [pc, #280]	; (8004810 <BUTTON_Handle+0x158>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b0f      	cmp	r3, #15
 80046fe:	d906      	bls.n	800470e <BUTTON_Handle+0x56>
	{
		current_state = deboucing_state;
 8004700:	4b42      	ldr	r3, [pc, #264]	; (800480c <BUTTON_Handle+0x154>)
 8004702:	781a      	ldrb	r2, [r3, #0]
 8004704:	4b44      	ldr	r3, [pc, #272]	; (8004818 <BUTTON_Handle+0x160>)
 8004706:	701a      	strb	r2, [r3, #0]
		is_deboucing = 0;
 8004708:	4b42      	ldr	r3, [pc, #264]	; (8004814 <BUTTON_Handle+0x15c>)
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
	}

	if(current_state != last_state)
 800470e:	4b42      	ldr	r3, [pc, #264]	; (8004818 <BUTTON_Handle+0x160>)
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	4b42      	ldr	r3, [pc, #264]	; (800481c <BUTTON_Handle+0x164>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d074      	beq.n	8004804 <BUTTON_Handle+0x14c>
	{
		switch ((current_input & 0x7E))
 800471a:	4b41      	ldr	r3, [pc, #260]	; (8004820 <BUTTON_Handle+0x168>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004722:	2b3e      	cmp	r3, #62	; 0x3e
 8004724:	d062      	beq.n	80047ec <BUTTON_Handle+0x134>
 8004726:	2b3e      	cmp	r3, #62	; 0x3e
 8004728:	db68      	blt.n	80047fc <BUTTON_Handle+0x144>
 800472a:	2b7e      	cmp	r3, #126	; 0x7e
 800472c:	dc66      	bgt.n	80047fc <BUTTON_Handle+0x144>
 800472e:	2b5e      	cmp	r3, #94	; 0x5e
 8004730:	db64      	blt.n	80047fc <BUTTON_Handle+0x144>
 8004732:	3b5e      	subs	r3, #94	; 0x5e
 8004734:	2b20      	cmp	r3, #32
 8004736:	d861      	bhi.n	80047fc <BUTTON_Handle+0x144>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <BUTTON_Handle+0x88>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	080047e5 	.word	0x080047e5
 8004744:	080047fd 	.word	0x080047fd
 8004748:	080047fd 	.word	0x080047fd
 800474c:	080047fd 	.word	0x080047fd
 8004750:	080047fd 	.word	0x080047fd
 8004754:	080047fd 	.word	0x080047fd
 8004758:	080047fd 	.word	0x080047fd
 800475c:	080047fd 	.word	0x080047fd
 8004760:	080047fd 	.word	0x080047fd
 8004764:	080047fd 	.word	0x080047fd
 8004768:	080047fd 	.word	0x080047fd
 800476c:	080047fd 	.word	0x080047fd
 8004770:	080047fd 	.word	0x080047fd
 8004774:	080047fd 	.word	0x080047fd
 8004778:	080047fd 	.word	0x080047fd
 800477c:	080047fd 	.word	0x080047fd
 8004780:	080047dd 	.word	0x080047dd
 8004784:	080047fd 	.word	0x080047fd
 8004788:	080047fd 	.word	0x080047fd
 800478c:	080047fd 	.word	0x080047fd
 8004790:	080047fd 	.word	0x080047fd
 8004794:	080047fd 	.word	0x080047fd
 8004798:	080047fd 	.word	0x080047fd
 800479c:	080047fd 	.word	0x080047fd
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	080047fd 	.word	0x080047fd
 80047b0:	080047cd 	.word	0x080047cd
 80047b4:	080047fd 	.word	0x080047fd
 80047b8:	080047c5 	.word	0x080047c5
 80047bc:	080047fd 	.word	0x080047fd
 80047c0:	080047f5 	.word	0x080047f5
		{
			case 0b01111100:
				*state = state_left;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
			break;
 80047ca:	e017      	b.n	80047fc <BUTTON_Handle+0x144>
			case 0b01111010:
				*state = state_mode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2202      	movs	r2, #2
 80047d0:	701a      	strb	r2, [r3, #0]
			break;
 80047d2:	e013      	b.n	80047fc <BUTTON_Handle+0x144>
			case 0b01110110:
				*state = state_down;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2203      	movs	r2, #3
 80047d8:	701a      	strb	r2, [r3, #0]
			break;
 80047da:	e00f      	b.n	80047fc <BUTTON_Handle+0x144>
			case 0b01101110:
				*state = state_up;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2204      	movs	r2, #4
 80047e0:	701a      	strb	r2, [r3, #0]
			break;
 80047e2:	e00b      	b.n	80047fc <BUTTON_Handle+0x144>
			case 0b01011110:
				*state = state_right;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2205      	movs	r2, #5
 80047e8:	701a      	strb	r2, [r3, #0]
			break;
 80047ea:	e007      	b.n	80047fc <BUTTON_Handle+0x144>
			case 0b00111110:
				*state = state_set;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2206      	movs	r2, #6
 80047f0:	701a      	strb	r2, [r3, #0]
			break;
 80047f2:	e003      	b.n	80047fc <BUTTON_Handle+0x144>
			case 0b01111110:
				*state = state_null;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
			break;
 80047fa:	bf00      	nop
		}
		last_state = current_state;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <BUTTON_Handle+0x160>)
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <BUTTON_Handle+0x164>)
 8004802:	701a      	strb	r2, [r3, #0]
	}
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	2000001b 	.word	0x2000001b
 8004810:	20000148 	.word	0x20000148
 8004814:	20000145 	.word	0x20000145
 8004818:	20000019 	.word	0x20000019
 800481c:	2000001a 	.word	0x2000001a
 8004820:	2000014c 	.word	0x2000014c

08004824 <button_detect>:

state_button_t button_detect(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
	current_input = GPIOA->IDR;
 8004828:	4b08      	ldr	r3, [pc, #32]	; (800484c <button_detect+0x28>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4b08      	ldr	r3, [pc, #32]	; (8004850 <button_detect+0x2c>)
 8004830:	701a      	strb	r2, [r3, #0]
	BUTTON_Handle(current_input & 0x7E, &state_button);
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <button_detect+0x2c>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4905      	ldr	r1, [pc, #20]	; (8004854 <button_detect+0x30>)
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff ff3a 	bl	80046b8 <BUTTON_Handle>
	return state_button;
 8004844:	4b03      	ldr	r3, [pc, #12]	; (8004854 <button_detect+0x30>)
 8004846:	781b      	ldrb	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40010800 	.word	0x40010800
 8004850:	2000014c 	.word	0x2000014c
 8004854:	20000144 	.word	0x20000144

08004858 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800485e:	f000 fa27 	bl	8004cb0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004862:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004866:	2201      	movs	r2, #1
 8004868:	2178      	movs	r1, #120	; 0x78
 800486a:	485b      	ldr	r0, [pc, #364]	; (80049d8 <SSD1306_Init+0x180>)
 800486c:	f7fe fe20 	bl	80034b0 <HAL_I2C_IsDeviceReady>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8004876:	2300      	movs	r3, #0
 8004878:	e0a9      	b.n	80049ce <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800487a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800487e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004880:	e002      	b.n	8004888 <SSD1306_Init+0x30>
		p--;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3b01      	subs	r3, #1
 8004886:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f9      	bne.n	8004882 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800488e:	22ae      	movs	r2, #174	; 0xae
 8004890:	2100      	movs	r1, #0
 8004892:	2078      	movs	r0, #120	; 0x78
 8004894:	f000 fa86 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8004898:	2220      	movs	r2, #32
 800489a:	2100      	movs	r1, #0
 800489c:	2078      	movs	r0, #120	; 0x78
 800489e:	f000 fa81 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80048a2:	2210      	movs	r2, #16
 80048a4:	2100      	movs	r1, #0
 80048a6:	2078      	movs	r0, #120	; 0x78
 80048a8:	f000 fa7c 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80048ac:	22b0      	movs	r2, #176	; 0xb0
 80048ae:	2100      	movs	r1, #0
 80048b0:	2078      	movs	r0, #120	; 0x78
 80048b2:	f000 fa77 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80048b6:	22c8      	movs	r2, #200	; 0xc8
 80048b8:	2100      	movs	r1, #0
 80048ba:	2078      	movs	r0, #120	; 0x78
 80048bc:	f000 fa72 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80048c0:	2200      	movs	r2, #0
 80048c2:	2100      	movs	r1, #0
 80048c4:	2078      	movs	r0, #120	; 0x78
 80048c6:	f000 fa6d 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80048ca:	2210      	movs	r2, #16
 80048cc:	2100      	movs	r1, #0
 80048ce:	2078      	movs	r0, #120	; 0x78
 80048d0:	f000 fa68 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80048d4:	2240      	movs	r2, #64	; 0x40
 80048d6:	2100      	movs	r1, #0
 80048d8:	2078      	movs	r0, #120	; 0x78
 80048da:	f000 fa63 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80048de:	2281      	movs	r2, #129	; 0x81
 80048e0:	2100      	movs	r1, #0
 80048e2:	2078      	movs	r0, #120	; 0x78
 80048e4:	f000 fa5e 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80048e8:	22ff      	movs	r2, #255	; 0xff
 80048ea:	2100      	movs	r1, #0
 80048ec:	2078      	movs	r0, #120	; 0x78
 80048ee:	f000 fa59 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80048f2:	22a1      	movs	r2, #161	; 0xa1
 80048f4:	2100      	movs	r1, #0
 80048f6:	2078      	movs	r0, #120	; 0x78
 80048f8:	f000 fa54 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80048fc:	22a6      	movs	r2, #166	; 0xa6
 80048fe:	2100      	movs	r1, #0
 8004900:	2078      	movs	r0, #120	; 0x78
 8004902:	f000 fa4f 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8004906:	22a8      	movs	r2, #168	; 0xa8
 8004908:	2100      	movs	r1, #0
 800490a:	2078      	movs	r0, #120	; 0x78
 800490c:	f000 fa4a 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004910:	223f      	movs	r2, #63	; 0x3f
 8004912:	2100      	movs	r1, #0
 8004914:	2078      	movs	r0, #120	; 0x78
 8004916:	f000 fa45 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800491a:	22a4      	movs	r2, #164	; 0xa4
 800491c:	2100      	movs	r1, #0
 800491e:	2078      	movs	r0, #120	; 0x78
 8004920:	f000 fa40 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004924:	22d3      	movs	r2, #211	; 0xd3
 8004926:	2100      	movs	r1, #0
 8004928:	2078      	movs	r0, #120	; 0x78
 800492a:	f000 fa3b 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800492e:	2200      	movs	r2, #0
 8004930:	2100      	movs	r1, #0
 8004932:	2078      	movs	r0, #120	; 0x78
 8004934:	f000 fa36 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004938:	22d5      	movs	r2, #213	; 0xd5
 800493a:	2100      	movs	r1, #0
 800493c:	2078      	movs	r0, #120	; 0x78
 800493e:	f000 fa31 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004942:	22f0      	movs	r2, #240	; 0xf0
 8004944:	2100      	movs	r1, #0
 8004946:	2078      	movs	r0, #120	; 0x78
 8004948:	f000 fa2c 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800494c:	22d9      	movs	r2, #217	; 0xd9
 800494e:	2100      	movs	r1, #0
 8004950:	2078      	movs	r0, #120	; 0x78
 8004952:	f000 fa27 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004956:	2222      	movs	r2, #34	; 0x22
 8004958:	2100      	movs	r1, #0
 800495a:	2078      	movs	r0, #120	; 0x78
 800495c:	f000 fa22 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004960:	22da      	movs	r2, #218	; 0xda
 8004962:	2100      	movs	r1, #0
 8004964:	2078      	movs	r0, #120	; 0x78
 8004966:	f000 fa1d 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800496a:	2212      	movs	r2, #18
 800496c:	2100      	movs	r1, #0
 800496e:	2078      	movs	r0, #120	; 0x78
 8004970:	f000 fa18 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004974:	22db      	movs	r2, #219	; 0xdb
 8004976:	2100      	movs	r1, #0
 8004978:	2078      	movs	r0, #120	; 0x78
 800497a:	f000 fa13 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800497e:	2220      	movs	r2, #32
 8004980:	2100      	movs	r1, #0
 8004982:	2078      	movs	r0, #120	; 0x78
 8004984:	f000 fa0e 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004988:	228d      	movs	r2, #141	; 0x8d
 800498a:	2100      	movs	r1, #0
 800498c:	2078      	movs	r0, #120	; 0x78
 800498e:	f000 fa09 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004992:	2214      	movs	r2, #20
 8004994:	2100      	movs	r1, #0
 8004996:	2078      	movs	r0, #120	; 0x78
 8004998:	f000 fa04 	bl	8004da4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800499c:	22af      	movs	r2, #175	; 0xaf
 800499e:	2100      	movs	r1, #0
 80049a0:	2078      	movs	r0, #120	; 0x78
 80049a2:	f000 f9ff 	bl	8004da4 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80049a6:	222e      	movs	r2, #46	; 0x2e
 80049a8:	2100      	movs	r1, #0
 80049aa:	2078      	movs	r0, #120	; 0x78
 80049ac:	f000 f9fa 	bl	8004da4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80049b0:	2000      	movs	r0, #0
 80049b2:	f000 f843 	bl	8004a3c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80049b6:	f000 f813 	bl	80049e0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <SSD1306_Init+0x184>)
 80049bc:	2200      	movs	r2, #0
 80049be:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <SSD1306_Init+0x184>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <SSD1306_Init+0x184>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80049cc:	2301      	movs	r3, #1
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200000c8 	.word	0x200000c8
 80049dc:	20000550 	.word	0x20000550

080049e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80049e6:	2300      	movs	r3, #0
 80049e8:	71fb      	strb	r3, [r7, #7]
 80049ea:	e01d      	b.n	8004a28 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	3b50      	subs	r3, #80	; 0x50
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	2100      	movs	r1, #0
 80049f6:	2078      	movs	r0, #120	; 0x78
 80049f8:	f000 f9d4 	bl	8004da4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80049fc:	2200      	movs	r2, #0
 80049fe:	2100      	movs	r1, #0
 8004a00:	2078      	movs	r0, #120	; 0x78
 8004a02:	f000 f9cf 	bl	8004da4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004a06:	2210      	movs	r2, #16
 8004a08:	2100      	movs	r1, #0
 8004a0a:	2078      	movs	r0, #120	; 0x78
 8004a0c:	f000 f9ca 	bl	8004da4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	01db      	lsls	r3, r3, #7
 8004a14:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <SSD1306_UpdateScreen+0x58>)
 8004a16:	441a      	add	r2, r3
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	2140      	movs	r1, #64	; 0x40
 8004a1c:	2078      	movs	r0, #120	; 0x78
 8004a1e:	f000 f95b 	bl	8004cd8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	3301      	adds	r3, #1
 8004a26:	71fb      	strb	r3, [r7, #7]
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	2b07      	cmp	r3, #7
 8004a2c:	d9de      	bls.n	80049ec <SSD1306_UpdateScreen+0xc>
	}
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000150 	.word	0x20000150

08004a3c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <SSD1306_Fill+0x14>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <SSD1306_Fill+0x16>
 8004a50:	23ff      	movs	r3, #255	; 0xff
 8004a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a56:	4619      	mov	r1, r3
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <SSD1306_Fill+0x2c>)
 8004a5a:	f000 f9e1 	bl	8004e20 <memset>
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000150 	.word	0x20000150

08004a6c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	80fb      	strh	r3, [r7, #6]
 8004a76:	460b      	mov	r3, r1
 8004a78:	80bb      	strh	r3, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	70fb      	strb	r3, [r7, #3]
	if (
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	2b7f      	cmp	r3, #127	; 0x7f
 8004a82:	d848      	bhi.n	8004b16 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8004a84:	88bb      	ldrh	r3, [r7, #4]
 8004a86:	2b3f      	cmp	r3, #63	; 0x3f
 8004a88:	d845      	bhi.n	8004b16 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004a8a:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <SSD1306_DrawPixel+0xb4>)
 8004a8c:	791b      	ldrb	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d006      	beq.n	8004aa0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d11a      	bne.n	8004adc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004aa6:	88fa      	ldrh	r2, [r7, #6]
 8004aa8:	88bb      	ldrh	r3, [r7, #4]
 8004aaa:	08db      	lsrs	r3, r3, #3
 8004aac:	b298      	uxth	r0, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	01db      	lsls	r3, r3, #7
 8004ab2:	4413      	add	r3, r2
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <SSD1306_DrawPixel+0xb8>)
 8004ab6:	5cd3      	ldrb	r3, [r2, r3]
 8004ab8:	b25a      	sxtb	r2, r3
 8004aba:	88bb      	ldrh	r3, [r7, #4]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b259      	sxtb	r1, r3
 8004acc:	88fa      	ldrh	r2, [r7, #6]
 8004ace:	4603      	mov	r3, r0
 8004ad0:	01db      	lsls	r3, r3, #7
 8004ad2:	4413      	add	r3, r2
 8004ad4:	b2c9      	uxtb	r1, r1
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <SSD1306_DrawPixel+0xb8>)
 8004ad8:	54d1      	strb	r1, [r2, r3]
 8004ada:	e01d      	b.n	8004b18 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	88bb      	ldrh	r3, [r7, #4]
 8004ae0:	08db      	lsrs	r3, r3, #3
 8004ae2:	b298      	uxth	r0, r3
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	01db      	lsls	r3, r3, #7
 8004ae8:	4413      	add	r3, r2
 8004aea:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <SSD1306_DrawPixel+0xb8>)
 8004aec:	5cd3      	ldrb	r3, [r2, r3]
 8004aee:	b25a      	sxtb	r2, r3
 8004af0:	88bb      	ldrh	r3, [r7, #4]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2101      	movs	r1, #1
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	b25b      	sxtb	r3, r3
 8004b02:	4013      	ands	r3, r2
 8004b04:	b259      	sxtb	r1, r3
 8004b06:	88fa      	ldrh	r2, [r7, #6]
 8004b08:	4603      	mov	r3, r0
 8004b0a:	01db      	lsls	r3, r3, #7
 8004b0c:	4413      	add	r3, r2
 8004b0e:	b2c9      	uxtb	r1, r1
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <SSD1306_DrawPixel+0xb8>)
 8004b12:	54d1      	strb	r1, [r2, r3]
 8004b14:	e000      	b.n	8004b18 <SSD1306_DrawPixel+0xac>
		return;
 8004b16:	bf00      	nop
	}
}
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr
 8004b20:	20000550 	.word	0x20000550
 8004b24:	20000150 	.word	0x20000150

08004b28 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	460a      	mov	r2, r1
 8004b32:	80fb      	strh	r3, [r7, #6]
 8004b34:	4613      	mov	r3, r2
 8004b36:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004b38:	4a05      	ldr	r2, [pc, #20]	; (8004b50 <SSD1306_GotoXY+0x28>)
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8004b3e:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <SSD1306_GotoXY+0x28>)
 8004b40:	88bb      	ldrh	r3, [r7, #4]
 8004b42:	8053      	strh	r3, [r2, #2]
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000550 	.word	0x20000550

08004b54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	71fb      	strb	r3, [r7, #7]
 8004b60:	4613      	mov	r3, r2
 8004b62:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004b64:	4b3a      	ldr	r3, [pc, #232]	; (8004c50 <SSD1306_Putc+0xfc>)
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	4413      	add	r3, r2
	if (
 8004b70:	2b7f      	cmp	r3, #127	; 0x7f
 8004b72:	dc07      	bgt.n	8004b84 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8004b74:	4b36      	ldr	r3, [pc, #216]	; (8004c50 <SSD1306_Putc+0xfc>)
 8004b76:	885b      	ldrh	r3, [r3, #2]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004b80:	2b3f      	cmp	r3, #63	; 0x3f
 8004b82:	dd01      	ble.n	8004b88 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e05e      	b.n	8004c46 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e04b      	b.n	8004c26 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	3b20      	subs	r3, #32
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	7849      	ldrb	r1, [r1, #1]
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	440b      	add	r3, r1
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	e030      	b.n	8004c14 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d010      	beq.n	8004be4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8004bc2:	4b23      	ldr	r3, [pc, #140]	; (8004c50 <SSD1306_Putc+0xfc>)
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	4413      	add	r3, r2
 8004bcc:	b298      	uxth	r0, r3
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <SSD1306_Putc+0xfc>)
 8004bd0:	885a      	ldrh	r2, [r3, #2]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	79ba      	ldrb	r2, [r7, #6]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f7ff ff45 	bl	8004a6c <SSD1306_DrawPixel>
 8004be2:	e014      	b.n	8004c0e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004be4:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <SSD1306_Putc+0xfc>)
 8004be6:	881a      	ldrh	r2, [r3, #0]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	b298      	uxth	r0, r3
 8004bf0:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <SSD1306_Putc+0xfc>)
 8004bf2:	885a      	ldrh	r2, [r3, #2]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	b299      	uxth	r1, r3
 8004bfc:	79bb      	ldrb	r3, [r7, #6]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf0c      	ite	eq
 8004c02:	2301      	moveq	r3, #1
 8004c04:	2300      	movne	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f7ff ff2f 	bl	8004a6c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	3301      	adds	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d3c8      	bcc.n	8004bb2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	3301      	adds	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d3ad      	bcc.n	8004b8e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8004c32:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <SSD1306_Putc+0xfc>)
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <SSD1306_Putc+0xfc>)
 8004c42:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8004c44:	79fb      	ldrb	r3, [r7, #7]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000550 	.word	0x20000550

08004c54 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8004c62:	e012      	b.n	8004c8a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	79fa      	ldrb	r2, [r7, #7]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff ff71 	bl	8004b54 <SSD1306_Putc>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d002      	beq.n	8004c84 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	e008      	b.n	8004c96 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e8      	bne.n	8004c64 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	781b      	ldrb	r3, [r3, #0]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f7ff feca 	bl	8004a3c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8004ca8:	f7ff fe9a 	bl	80049e0 <SSD1306_UpdateScreen>
}
 8004cac:	bf00      	nop
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <ssd1306_I2C_Init+0x24>)
 8004cb8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004cba:	e002      	b.n	8004cc2 <ssd1306_I2C_Init+0x12>
		p--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f9      	bne.n	8004cbc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	0003d090 	.word	0x0003d090

08004cd8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004cd8:	b590      	push	{r4, r7, lr}
 8004cda:	b0c7      	sub	sp, #284	; 0x11c
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8004ce6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8004cea:	600a      	str	r2, [r1, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cf2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cfe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8004d02:	4602      	mov	r2, r0
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d0e:	460a      	mov	r2, r1
 8004d10:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8004d12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d1a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8004d1e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8004d22:	7812      	ldrb	r2, [r2, #0]
 8004d24:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004d2c:	e015      	b.n	8004d5a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8004d2e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004d32:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8004d36:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	441a      	add	r2, r3
 8004d3e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004d42:	3301      	adds	r3, #1
 8004d44:	7811      	ldrb	r1, [r2, #0]
 8004d46:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8004d4a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8004d4e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004d50:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004d54:	3301      	adds	r3, #1
 8004d56:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004d5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8004d64:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8004d68:	8812      	ldrh	r2, [r2, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d8df      	bhi.n	8004d2e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8004d6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d72:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	b299      	uxth	r1, r3
 8004d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	3301      	adds	r3, #1
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f107 020c 	add.w	r2, r7, #12
 8004d8c:	200a      	movs	r0, #10
 8004d8e:	9000      	str	r0, [sp, #0]
 8004d90:	4803      	ldr	r0, [pc, #12]	; (8004da0 <ssd1306_I2C_WriteMulti+0xc8>)
 8004d92:	f7fe fa8f 	bl	80032b4 <HAL_I2C_Master_Transmit>
}
 8004d96:	bf00      	nop
 8004d98:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd90      	pop	{r4, r7, pc}
 8004da0:	200000c8 	.word	0x200000c8

08004da4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	4603      	mov	r3, r0
 8004dac:	71fb      	strb	r3, [r7, #7]
 8004dae:	460b      	mov	r3, r1
 8004db0:	71bb      	strb	r3, [r7, #6]
 8004db2:	4613      	mov	r3, r2
 8004db4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004db6:	79bb      	ldrb	r3, [r7, #6]
 8004db8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004dba:	797b      	ldrb	r3, [r7, #5]
 8004dbc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	b299      	uxth	r1, r3
 8004dc2:	f107 020c 	add.w	r2, r7, #12
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2302      	movs	r3, #2
 8004dcc:	4803      	ldr	r0, [pc, #12]	; (8004ddc <ssd1306_I2C_Write+0x38>)
 8004dce:	f7fe fa71 	bl	80032b4 <HAL_I2C_Master_Transmit>
}
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200000c8 	.word	0x200000c8

08004de0 <siprintf>:
 8004de0:	b40e      	push	{r1, r2, r3}
 8004de2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004de6:	b500      	push	{lr}
 8004de8:	b09c      	sub	sp, #112	; 0x70
 8004dea:	ab1d      	add	r3, sp, #116	; 0x74
 8004dec:	9002      	str	r0, [sp, #8]
 8004dee:	9006      	str	r0, [sp, #24]
 8004df0:	9107      	str	r1, [sp, #28]
 8004df2:	9104      	str	r1, [sp, #16]
 8004df4:	4808      	ldr	r0, [pc, #32]	; (8004e18 <siprintf+0x38>)
 8004df6:	4909      	ldr	r1, [pc, #36]	; (8004e1c <siprintf+0x3c>)
 8004df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dfc:	9105      	str	r1, [sp, #20]
 8004dfe:	6800      	ldr	r0, [r0, #0]
 8004e00:	a902      	add	r1, sp, #8
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	f000 f98e 	bl	8005124 <_svfiprintf_r>
 8004e08:	2200      	movs	r2, #0
 8004e0a:	9b02      	ldr	r3, [sp, #8]
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	b01c      	add	sp, #112	; 0x70
 8004e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e14:	b003      	add	sp, #12
 8004e16:	4770      	bx	lr
 8004e18:	20000078 	.word	0x20000078
 8004e1c:	ffff0208 	.word	0xffff0208

08004e20 <memset>:
 8004e20:	4603      	mov	r3, r0
 8004e22:	4402      	add	r2, r0
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d100      	bne.n	8004e2a <memset+0xa>
 8004e28:	4770      	bx	lr
 8004e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2e:	e7f9      	b.n	8004e24 <memset+0x4>

08004e30 <__errno>:
 8004e30:	4b01      	ldr	r3, [pc, #4]	; (8004e38 <__errno+0x8>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000078 	.word	0x20000078

08004e3c <__libc_init_array>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	2600      	movs	r6, #0
 8004e40:	4d0c      	ldr	r5, [pc, #48]	; (8004e74 <__libc_init_array+0x38>)
 8004e42:	4c0d      	ldr	r4, [pc, #52]	; (8004e78 <__libc_init_array+0x3c>)
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	42a6      	cmp	r6, r4
 8004e4a:	d109      	bne.n	8004e60 <__libc_init_array+0x24>
 8004e4c:	f000 fc7a 	bl	8005744 <_init>
 8004e50:	2600      	movs	r6, #0
 8004e52:	4d0a      	ldr	r5, [pc, #40]	; (8004e7c <__libc_init_array+0x40>)
 8004e54:	4c0a      	ldr	r4, [pc, #40]	; (8004e80 <__libc_init_array+0x44>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	42a6      	cmp	r6, r4
 8004e5c:	d105      	bne.n	8004e6a <__libc_init_array+0x2e>
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e64:	4798      	blx	r3
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7ee      	b.n	8004e48 <__libc_init_array+0xc>
 8004e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6e:	4798      	blx	r3
 8004e70:	3601      	adds	r6, #1
 8004e72:	e7f2      	b.n	8004e5a <__libc_init_array+0x1e>
 8004e74:	08006d5c 	.word	0x08006d5c
 8004e78:	08006d5c 	.word	0x08006d5c
 8004e7c:	08006d5c 	.word	0x08006d5c
 8004e80:	08006d60 	.word	0x08006d60

08004e84 <__retarget_lock_acquire_recursive>:
 8004e84:	4770      	bx	lr

08004e86 <__retarget_lock_release_recursive>:
 8004e86:	4770      	bx	lr

08004e88 <_free_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4605      	mov	r5, r0
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	d040      	beq.n	8004f12 <_free_r+0x8a>
 8004e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e94:	1f0c      	subs	r4, r1, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bfb8      	it	lt
 8004e9a:	18e4      	addlt	r4, r4, r3
 8004e9c:	f000 f8dc 	bl	8005058 <__malloc_lock>
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <_free_r+0x8c>)
 8004ea2:	6813      	ldr	r3, [r2, #0]
 8004ea4:	b933      	cbnz	r3, 8004eb4 <_free_r+0x2c>
 8004ea6:	6063      	str	r3, [r4, #4]
 8004ea8:	6014      	str	r4, [r2, #0]
 8004eaa:	4628      	mov	r0, r5
 8004eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb0:	f000 b8d8 	b.w	8005064 <__malloc_unlock>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d908      	bls.n	8004eca <_free_r+0x42>
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	1821      	adds	r1, r4, r0
 8004ebc:	428b      	cmp	r3, r1
 8004ebe:	bf01      	itttt	eq
 8004ec0:	6819      	ldreq	r1, [r3, #0]
 8004ec2:	685b      	ldreq	r3, [r3, #4]
 8004ec4:	1809      	addeq	r1, r1, r0
 8004ec6:	6021      	streq	r1, [r4, #0]
 8004ec8:	e7ed      	b.n	8004ea6 <_free_r+0x1e>
 8004eca:	461a      	mov	r2, r3
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	b10b      	cbz	r3, 8004ed4 <_free_r+0x4c>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d9fa      	bls.n	8004eca <_free_r+0x42>
 8004ed4:	6811      	ldr	r1, [r2, #0]
 8004ed6:	1850      	adds	r0, r2, r1
 8004ed8:	42a0      	cmp	r0, r4
 8004eda:	d10b      	bne.n	8004ef4 <_free_r+0x6c>
 8004edc:	6820      	ldr	r0, [r4, #0]
 8004ede:	4401      	add	r1, r0
 8004ee0:	1850      	adds	r0, r2, r1
 8004ee2:	4283      	cmp	r3, r0
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	d1e0      	bne.n	8004eaa <_free_r+0x22>
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4408      	add	r0, r1
 8004eee:	6010      	str	r0, [r2, #0]
 8004ef0:	6053      	str	r3, [r2, #4]
 8004ef2:	e7da      	b.n	8004eaa <_free_r+0x22>
 8004ef4:	d902      	bls.n	8004efc <_free_r+0x74>
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	602b      	str	r3, [r5, #0]
 8004efa:	e7d6      	b.n	8004eaa <_free_r+0x22>
 8004efc:	6820      	ldr	r0, [r4, #0]
 8004efe:	1821      	adds	r1, r4, r0
 8004f00:	428b      	cmp	r3, r1
 8004f02:	bf01      	itttt	eq
 8004f04:	6819      	ldreq	r1, [r3, #0]
 8004f06:	685b      	ldreq	r3, [r3, #4]
 8004f08:	1809      	addeq	r1, r1, r0
 8004f0a:	6021      	streq	r1, [r4, #0]
 8004f0c:	6063      	str	r3, [r4, #4]
 8004f0e:	6054      	str	r4, [r2, #4]
 8004f10:	e7cb      	b.n	8004eaa <_free_r+0x22>
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	20000698 	.word	0x20000698

08004f18 <sbrk_aligned>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4e0e      	ldr	r6, [pc, #56]	; (8004f54 <sbrk_aligned+0x3c>)
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	6831      	ldr	r1, [r6, #0]
 8004f20:	4605      	mov	r5, r0
 8004f22:	b911      	cbnz	r1, 8004f2a <sbrk_aligned+0x12>
 8004f24:	f000 fbaa 	bl	800567c <_sbrk_r>
 8004f28:	6030      	str	r0, [r6, #0]
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 fba5 	bl	800567c <_sbrk_r>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d00a      	beq.n	8004f4c <sbrk_aligned+0x34>
 8004f36:	1cc4      	adds	r4, r0, #3
 8004f38:	f024 0403 	bic.w	r4, r4, #3
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d007      	beq.n	8004f50 <sbrk_aligned+0x38>
 8004f40:	1a21      	subs	r1, r4, r0
 8004f42:	4628      	mov	r0, r5
 8004f44:	f000 fb9a 	bl	800567c <_sbrk_r>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d101      	bne.n	8004f50 <sbrk_aligned+0x38>
 8004f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f50:	4620      	mov	r0, r4
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	2000069c 	.word	0x2000069c

08004f58 <_malloc_r>:
 8004f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f5c:	1ccd      	adds	r5, r1, #3
 8004f5e:	f025 0503 	bic.w	r5, r5, #3
 8004f62:	3508      	adds	r5, #8
 8004f64:	2d0c      	cmp	r5, #12
 8004f66:	bf38      	it	cc
 8004f68:	250c      	movcc	r5, #12
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	db01      	blt.n	8004f74 <_malloc_r+0x1c>
 8004f70:	42a9      	cmp	r1, r5
 8004f72:	d905      	bls.n	8004f80 <_malloc_r+0x28>
 8004f74:	230c      	movs	r3, #12
 8004f76:	2600      	movs	r6, #0
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005054 <_malloc_r+0xfc>
 8004f84:	f000 f868 	bl	8005058 <__malloc_lock>
 8004f88:	f8d8 3000 	ldr.w	r3, [r8]
 8004f8c:	461c      	mov	r4, r3
 8004f8e:	bb5c      	cbnz	r4, 8004fe8 <_malloc_r+0x90>
 8004f90:	4629      	mov	r1, r5
 8004f92:	4638      	mov	r0, r7
 8004f94:	f7ff ffc0 	bl	8004f18 <sbrk_aligned>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	d155      	bne.n	800504a <_malloc_r+0xf2>
 8004f9e:	f8d8 4000 	ldr.w	r4, [r8]
 8004fa2:	4626      	mov	r6, r4
 8004fa4:	2e00      	cmp	r6, #0
 8004fa6:	d145      	bne.n	8005034 <_malloc_r+0xdc>
 8004fa8:	2c00      	cmp	r4, #0
 8004faa:	d048      	beq.n	800503e <_malloc_r+0xe6>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	eb04 0903 	add.w	r9, r4, r3
 8004fb6:	f000 fb61 	bl	800567c <_sbrk_r>
 8004fba:	4581      	cmp	r9, r0
 8004fbc:	d13f      	bne.n	800503e <_malloc_r+0xe6>
 8004fbe:	6821      	ldr	r1, [r4, #0]
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	1a6d      	subs	r5, r5, r1
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	f7ff ffa7 	bl	8004f18 <sbrk_aligned>
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d037      	beq.n	800503e <_malloc_r+0xe6>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	442b      	add	r3, r5
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d038      	beq.n	800504e <_malloc_r+0xf6>
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	42a2      	cmp	r2, r4
 8004fe0:	d12b      	bne.n	800503a <_malloc_r+0xe2>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	e00f      	b.n	8005008 <_malloc_r+0xb0>
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	1b52      	subs	r2, r2, r5
 8004fec:	d41f      	bmi.n	800502e <_malloc_r+0xd6>
 8004fee:	2a0b      	cmp	r2, #11
 8004ff0:	d917      	bls.n	8005022 <_malloc_r+0xca>
 8004ff2:	1961      	adds	r1, r4, r5
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	6025      	str	r5, [r4, #0]
 8004ff8:	bf18      	it	ne
 8004ffa:	6059      	strne	r1, [r3, #4]
 8004ffc:	6863      	ldr	r3, [r4, #4]
 8004ffe:	bf08      	it	eq
 8005000:	f8c8 1000 	streq.w	r1, [r8]
 8005004:	5162      	str	r2, [r4, r5]
 8005006:	604b      	str	r3, [r1, #4]
 8005008:	4638      	mov	r0, r7
 800500a:	f104 060b 	add.w	r6, r4, #11
 800500e:	f000 f829 	bl	8005064 <__malloc_unlock>
 8005012:	f026 0607 	bic.w	r6, r6, #7
 8005016:	1d23      	adds	r3, r4, #4
 8005018:	1af2      	subs	r2, r6, r3
 800501a:	d0ae      	beq.n	8004f7a <_malloc_r+0x22>
 800501c:	1b9b      	subs	r3, r3, r6
 800501e:	50a3      	str	r3, [r4, r2]
 8005020:	e7ab      	b.n	8004f7a <_malloc_r+0x22>
 8005022:	42a3      	cmp	r3, r4
 8005024:	6862      	ldr	r2, [r4, #4]
 8005026:	d1dd      	bne.n	8004fe4 <_malloc_r+0x8c>
 8005028:	f8c8 2000 	str.w	r2, [r8]
 800502c:	e7ec      	b.n	8005008 <_malloc_r+0xb0>
 800502e:	4623      	mov	r3, r4
 8005030:	6864      	ldr	r4, [r4, #4]
 8005032:	e7ac      	b.n	8004f8e <_malloc_r+0x36>
 8005034:	4634      	mov	r4, r6
 8005036:	6876      	ldr	r6, [r6, #4]
 8005038:	e7b4      	b.n	8004fa4 <_malloc_r+0x4c>
 800503a:	4613      	mov	r3, r2
 800503c:	e7cc      	b.n	8004fd8 <_malloc_r+0x80>
 800503e:	230c      	movs	r3, #12
 8005040:	4638      	mov	r0, r7
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	f000 f80e 	bl	8005064 <__malloc_unlock>
 8005048:	e797      	b.n	8004f7a <_malloc_r+0x22>
 800504a:	6025      	str	r5, [r4, #0]
 800504c:	e7dc      	b.n	8005008 <_malloc_r+0xb0>
 800504e:	605b      	str	r3, [r3, #4]
 8005050:	deff      	udf	#255	; 0xff
 8005052:	bf00      	nop
 8005054:	20000698 	.word	0x20000698

08005058 <__malloc_lock>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__malloc_lock+0x8>)
 800505a:	f7ff bf13 	b.w	8004e84 <__retarget_lock_acquire_recursive>
 800505e:	bf00      	nop
 8005060:	20000694 	.word	0x20000694

08005064 <__malloc_unlock>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__malloc_unlock+0x8>)
 8005066:	f7ff bf0e 	b.w	8004e86 <__retarget_lock_release_recursive>
 800506a:	bf00      	nop
 800506c:	20000694 	.word	0x20000694

08005070 <__ssputs_r>:
 8005070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	461f      	mov	r7, r3
 8005076:	688e      	ldr	r6, [r1, #8]
 8005078:	4682      	mov	sl, r0
 800507a:	42be      	cmp	r6, r7
 800507c:	460c      	mov	r4, r1
 800507e:	4690      	mov	r8, r2
 8005080:	680b      	ldr	r3, [r1, #0]
 8005082:	d82c      	bhi.n	80050de <__ssputs_r+0x6e>
 8005084:	898a      	ldrh	r2, [r1, #12]
 8005086:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800508a:	d026      	beq.n	80050da <__ssputs_r+0x6a>
 800508c:	6965      	ldr	r5, [r4, #20]
 800508e:	6909      	ldr	r1, [r1, #16]
 8005090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005094:	eba3 0901 	sub.w	r9, r3, r1
 8005098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800509c:	1c7b      	adds	r3, r7, #1
 800509e:	444b      	add	r3, r9
 80050a0:	106d      	asrs	r5, r5, #1
 80050a2:	429d      	cmp	r5, r3
 80050a4:	bf38      	it	cc
 80050a6:	461d      	movcc	r5, r3
 80050a8:	0553      	lsls	r3, r2, #21
 80050aa:	d527      	bpl.n	80050fc <__ssputs_r+0x8c>
 80050ac:	4629      	mov	r1, r5
 80050ae:	f7ff ff53 	bl	8004f58 <_malloc_r>
 80050b2:	4606      	mov	r6, r0
 80050b4:	b360      	cbz	r0, 8005110 <__ssputs_r+0xa0>
 80050b6:	464a      	mov	r2, r9
 80050b8:	6921      	ldr	r1, [r4, #16]
 80050ba:	f000 fafd 	bl	80056b8 <memcpy>
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	6126      	str	r6, [r4, #16]
 80050cc:	444e      	add	r6, r9
 80050ce:	6026      	str	r6, [r4, #0]
 80050d0:	463e      	mov	r6, r7
 80050d2:	6165      	str	r5, [r4, #20]
 80050d4:	eba5 0509 	sub.w	r5, r5, r9
 80050d8:	60a5      	str	r5, [r4, #8]
 80050da:	42be      	cmp	r6, r7
 80050dc:	d900      	bls.n	80050e0 <__ssputs_r+0x70>
 80050de:	463e      	mov	r6, r7
 80050e0:	4632      	mov	r2, r6
 80050e2:	4641      	mov	r1, r8
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	f000 faaf 	bl	8005648 <memmove>
 80050ea:	2000      	movs	r0, #0
 80050ec:	68a3      	ldr	r3, [r4, #8]
 80050ee:	1b9b      	subs	r3, r3, r6
 80050f0:	60a3      	str	r3, [r4, #8]
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	4433      	add	r3, r6
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fc:	462a      	mov	r2, r5
 80050fe:	f000 fae9 	bl	80056d4 <_realloc_r>
 8005102:	4606      	mov	r6, r0
 8005104:	2800      	cmp	r0, #0
 8005106:	d1e0      	bne.n	80050ca <__ssputs_r+0x5a>
 8005108:	4650      	mov	r0, sl
 800510a:	6921      	ldr	r1, [r4, #16]
 800510c:	f7ff febc 	bl	8004e88 <_free_r>
 8005110:	230c      	movs	r3, #12
 8005112:	f8ca 3000 	str.w	r3, [sl]
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	e7e9      	b.n	80050f8 <__ssputs_r+0x88>

08005124 <_svfiprintf_r>:
 8005124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005128:	4698      	mov	r8, r3
 800512a:	898b      	ldrh	r3, [r1, #12]
 800512c:	4607      	mov	r7, r0
 800512e:	061b      	lsls	r3, r3, #24
 8005130:	460d      	mov	r5, r1
 8005132:	4614      	mov	r4, r2
 8005134:	b09d      	sub	sp, #116	; 0x74
 8005136:	d50e      	bpl.n	8005156 <_svfiprintf_r+0x32>
 8005138:	690b      	ldr	r3, [r1, #16]
 800513a:	b963      	cbnz	r3, 8005156 <_svfiprintf_r+0x32>
 800513c:	2140      	movs	r1, #64	; 0x40
 800513e:	f7ff ff0b 	bl	8004f58 <_malloc_r>
 8005142:	6028      	str	r0, [r5, #0]
 8005144:	6128      	str	r0, [r5, #16]
 8005146:	b920      	cbnz	r0, 8005152 <_svfiprintf_r+0x2e>
 8005148:	230c      	movs	r3, #12
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	f04f 30ff 	mov.w	r0, #4294967295
 8005150:	e0d0      	b.n	80052f4 <_svfiprintf_r+0x1d0>
 8005152:	2340      	movs	r3, #64	; 0x40
 8005154:	616b      	str	r3, [r5, #20]
 8005156:	2300      	movs	r3, #0
 8005158:	9309      	str	r3, [sp, #36]	; 0x24
 800515a:	2320      	movs	r3, #32
 800515c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005160:	2330      	movs	r3, #48	; 0x30
 8005162:	f04f 0901 	mov.w	r9, #1
 8005166:	f8cd 800c 	str.w	r8, [sp, #12]
 800516a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800530c <_svfiprintf_r+0x1e8>
 800516e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005172:	4623      	mov	r3, r4
 8005174:	469a      	mov	sl, r3
 8005176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800517a:	b10a      	cbz	r2, 8005180 <_svfiprintf_r+0x5c>
 800517c:	2a25      	cmp	r2, #37	; 0x25
 800517e:	d1f9      	bne.n	8005174 <_svfiprintf_r+0x50>
 8005180:	ebba 0b04 	subs.w	fp, sl, r4
 8005184:	d00b      	beq.n	800519e <_svfiprintf_r+0x7a>
 8005186:	465b      	mov	r3, fp
 8005188:	4622      	mov	r2, r4
 800518a:	4629      	mov	r1, r5
 800518c:	4638      	mov	r0, r7
 800518e:	f7ff ff6f 	bl	8005070 <__ssputs_r>
 8005192:	3001      	adds	r0, #1
 8005194:	f000 80a9 	beq.w	80052ea <_svfiprintf_r+0x1c6>
 8005198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800519a:	445a      	add	r2, fp
 800519c:	9209      	str	r2, [sp, #36]	; 0x24
 800519e:	f89a 3000 	ldrb.w	r3, [sl]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 80a1 	beq.w	80052ea <_svfiprintf_r+0x1c6>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295
 80051ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b2:	f10a 0a01 	add.w	sl, sl, #1
 80051b6:	9304      	str	r3, [sp, #16]
 80051b8:	9307      	str	r3, [sp, #28]
 80051ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051be:	931a      	str	r3, [sp, #104]	; 0x68
 80051c0:	4654      	mov	r4, sl
 80051c2:	2205      	movs	r2, #5
 80051c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c8:	4850      	ldr	r0, [pc, #320]	; (800530c <_svfiprintf_r+0x1e8>)
 80051ca:	f000 fa67 	bl	800569c <memchr>
 80051ce:	9a04      	ldr	r2, [sp, #16]
 80051d0:	b9d8      	cbnz	r0, 800520a <_svfiprintf_r+0xe6>
 80051d2:	06d0      	lsls	r0, r2, #27
 80051d4:	bf44      	itt	mi
 80051d6:	2320      	movmi	r3, #32
 80051d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051dc:	0711      	lsls	r1, r2, #28
 80051de:	bf44      	itt	mi
 80051e0:	232b      	movmi	r3, #43	; 0x2b
 80051e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051e6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ea:	2b2a      	cmp	r3, #42	; 0x2a
 80051ec:	d015      	beq.n	800521a <_svfiprintf_r+0xf6>
 80051ee:	4654      	mov	r4, sl
 80051f0:	2000      	movs	r0, #0
 80051f2:	f04f 0c0a 	mov.w	ip, #10
 80051f6:	9a07      	ldr	r2, [sp, #28]
 80051f8:	4621      	mov	r1, r4
 80051fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051fe:	3b30      	subs	r3, #48	; 0x30
 8005200:	2b09      	cmp	r3, #9
 8005202:	d94d      	bls.n	80052a0 <_svfiprintf_r+0x17c>
 8005204:	b1b0      	cbz	r0, 8005234 <_svfiprintf_r+0x110>
 8005206:	9207      	str	r2, [sp, #28]
 8005208:	e014      	b.n	8005234 <_svfiprintf_r+0x110>
 800520a:	eba0 0308 	sub.w	r3, r0, r8
 800520e:	fa09 f303 	lsl.w	r3, r9, r3
 8005212:	4313      	orrs	r3, r2
 8005214:	46a2      	mov	sl, r4
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	e7d2      	b.n	80051c0 <_svfiprintf_r+0x9c>
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	1d19      	adds	r1, r3, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	9103      	str	r1, [sp, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	bfbb      	ittet	lt
 8005226:	425b      	neglt	r3, r3
 8005228:	f042 0202 	orrlt.w	r2, r2, #2
 800522c:	9307      	strge	r3, [sp, #28]
 800522e:	9307      	strlt	r3, [sp, #28]
 8005230:	bfb8      	it	lt
 8005232:	9204      	strlt	r2, [sp, #16]
 8005234:	7823      	ldrb	r3, [r4, #0]
 8005236:	2b2e      	cmp	r3, #46	; 0x2e
 8005238:	d10c      	bne.n	8005254 <_svfiprintf_r+0x130>
 800523a:	7863      	ldrb	r3, [r4, #1]
 800523c:	2b2a      	cmp	r3, #42	; 0x2a
 800523e:	d134      	bne.n	80052aa <_svfiprintf_r+0x186>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	3402      	adds	r4, #2
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	9203      	str	r2, [sp, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	bfb8      	it	lt
 800524e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005252:	9305      	str	r3, [sp, #20]
 8005254:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005310 <_svfiprintf_r+0x1ec>
 8005258:	2203      	movs	r2, #3
 800525a:	4650      	mov	r0, sl
 800525c:	7821      	ldrb	r1, [r4, #0]
 800525e:	f000 fa1d 	bl	800569c <memchr>
 8005262:	b138      	cbz	r0, 8005274 <_svfiprintf_r+0x150>
 8005264:	2240      	movs	r2, #64	; 0x40
 8005266:	9b04      	ldr	r3, [sp, #16]
 8005268:	eba0 000a 	sub.w	r0, r0, sl
 800526c:	4082      	lsls	r2, r0
 800526e:	4313      	orrs	r3, r2
 8005270:	3401      	adds	r4, #1
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005278:	2206      	movs	r2, #6
 800527a:	4826      	ldr	r0, [pc, #152]	; (8005314 <_svfiprintf_r+0x1f0>)
 800527c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005280:	f000 fa0c 	bl	800569c <memchr>
 8005284:	2800      	cmp	r0, #0
 8005286:	d038      	beq.n	80052fa <_svfiprintf_r+0x1d6>
 8005288:	4b23      	ldr	r3, [pc, #140]	; (8005318 <_svfiprintf_r+0x1f4>)
 800528a:	bb1b      	cbnz	r3, 80052d4 <_svfiprintf_r+0x1b0>
 800528c:	9b03      	ldr	r3, [sp, #12]
 800528e:	3307      	adds	r3, #7
 8005290:	f023 0307 	bic.w	r3, r3, #7
 8005294:	3308      	adds	r3, #8
 8005296:	9303      	str	r3, [sp, #12]
 8005298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529a:	4433      	add	r3, r6
 800529c:	9309      	str	r3, [sp, #36]	; 0x24
 800529e:	e768      	b.n	8005172 <_svfiprintf_r+0x4e>
 80052a0:	460c      	mov	r4, r1
 80052a2:	2001      	movs	r0, #1
 80052a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80052a8:	e7a6      	b.n	80051f8 <_svfiprintf_r+0xd4>
 80052aa:	2300      	movs	r3, #0
 80052ac:	f04f 0c0a 	mov.w	ip, #10
 80052b0:	4619      	mov	r1, r3
 80052b2:	3401      	adds	r4, #1
 80052b4:	9305      	str	r3, [sp, #20]
 80052b6:	4620      	mov	r0, r4
 80052b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052bc:	3a30      	subs	r2, #48	; 0x30
 80052be:	2a09      	cmp	r2, #9
 80052c0:	d903      	bls.n	80052ca <_svfiprintf_r+0x1a6>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0c6      	beq.n	8005254 <_svfiprintf_r+0x130>
 80052c6:	9105      	str	r1, [sp, #20]
 80052c8:	e7c4      	b.n	8005254 <_svfiprintf_r+0x130>
 80052ca:	4604      	mov	r4, r0
 80052cc:	2301      	movs	r3, #1
 80052ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80052d2:	e7f0      	b.n	80052b6 <_svfiprintf_r+0x192>
 80052d4:	ab03      	add	r3, sp, #12
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	462a      	mov	r2, r5
 80052da:	4638      	mov	r0, r7
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <_svfiprintf_r+0x1f8>)
 80052de:	a904      	add	r1, sp, #16
 80052e0:	f3af 8000 	nop.w
 80052e4:	1c42      	adds	r2, r0, #1
 80052e6:	4606      	mov	r6, r0
 80052e8:	d1d6      	bne.n	8005298 <_svfiprintf_r+0x174>
 80052ea:	89ab      	ldrh	r3, [r5, #12]
 80052ec:	065b      	lsls	r3, r3, #25
 80052ee:	f53f af2d 	bmi.w	800514c <_svfiprintf_r+0x28>
 80052f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052f4:	b01d      	add	sp, #116	; 0x74
 80052f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fa:	ab03      	add	r3, sp, #12
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	462a      	mov	r2, r5
 8005300:	4638      	mov	r0, r7
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <_svfiprintf_r+0x1f8>)
 8005304:	a904      	add	r1, sp, #16
 8005306:	f000 f87d 	bl	8005404 <_printf_i>
 800530a:	e7eb      	b.n	80052e4 <_svfiprintf_r+0x1c0>
 800530c:	08006d28 	.word	0x08006d28
 8005310:	08006d2e 	.word	0x08006d2e
 8005314:	08006d32 	.word	0x08006d32
 8005318:	00000000 	.word	0x00000000
 800531c:	08005071 	.word	0x08005071

08005320 <_printf_common>:
 8005320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005324:	4616      	mov	r6, r2
 8005326:	4699      	mov	r9, r3
 8005328:	688a      	ldr	r2, [r1, #8]
 800532a:	690b      	ldr	r3, [r1, #16]
 800532c:	4607      	mov	r7, r0
 800532e:	4293      	cmp	r3, r2
 8005330:	bfb8      	it	lt
 8005332:	4613      	movlt	r3, r2
 8005334:	6033      	str	r3, [r6, #0]
 8005336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800533a:	460c      	mov	r4, r1
 800533c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005340:	b10a      	cbz	r2, 8005346 <_printf_common+0x26>
 8005342:	3301      	adds	r3, #1
 8005344:	6033      	str	r3, [r6, #0]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	0699      	lsls	r1, r3, #26
 800534a:	bf42      	ittt	mi
 800534c:	6833      	ldrmi	r3, [r6, #0]
 800534e:	3302      	addmi	r3, #2
 8005350:	6033      	strmi	r3, [r6, #0]
 8005352:	6825      	ldr	r5, [r4, #0]
 8005354:	f015 0506 	ands.w	r5, r5, #6
 8005358:	d106      	bne.n	8005368 <_printf_common+0x48>
 800535a:	f104 0a19 	add.w	sl, r4, #25
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	6832      	ldr	r2, [r6, #0]
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	42ab      	cmp	r3, r5
 8005366:	dc2b      	bgt.n	80053c0 <_printf_common+0xa0>
 8005368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800536c:	1e13      	subs	r3, r2, #0
 800536e:	6822      	ldr	r2, [r4, #0]
 8005370:	bf18      	it	ne
 8005372:	2301      	movne	r3, #1
 8005374:	0692      	lsls	r2, r2, #26
 8005376:	d430      	bmi.n	80053da <_printf_common+0xba>
 8005378:	4649      	mov	r1, r9
 800537a:	4638      	mov	r0, r7
 800537c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005380:	47c0      	blx	r8
 8005382:	3001      	adds	r0, #1
 8005384:	d023      	beq.n	80053ce <_printf_common+0xae>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	6922      	ldr	r2, [r4, #16]
 800538a:	f003 0306 	and.w	r3, r3, #6
 800538e:	2b04      	cmp	r3, #4
 8005390:	bf14      	ite	ne
 8005392:	2500      	movne	r5, #0
 8005394:	6833      	ldreq	r3, [r6, #0]
 8005396:	f04f 0600 	mov.w	r6, #0
 800539a:	bf08      	it	eq
 800539c:	68e5      	ldreq	r5, [r4, #12]
 800539e:	f104 041a 	add.w	r4, r4, #26
 80053a2:	bf08      	it	eq
 80053a4:	1aed      	subeq	r5, r5, r3
 80053a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053aa:	bf08      	it	eq
 80053ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053b0:	4293      	cmp	r3, r2
 80053b2:	bfc4      	itt	gt
 80053b4:	1a9b      	subgt	r3, r3, r2
 80053b6:	18ed      	addgt	r5, r5, r3
 80053b8:	42b5      	cmp	r5, r6
 80053ba:	d11a      	bne.n	80053f2 <_printf_common+0xd2>
 80053bc:	2000      	movs	r0, #0
 80053be:	e008      	b.n	80053d2 <_printf_common+0xb2>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4652      	mov	r2, sl
 80053c4:	4649      	mov	r1, r9
 80053c6:	4638      	mov	r0, r7
 80053c8:	47c0      	blx	r8
 80053ca:	3001      	adds	r0, #1
 80053cc:	d103      	bne.n	80053d6 <_printf_common+0xb6>
 80053ce:	f04f 30ff 	mov.w	r0, #4294967295
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	3501      	adds	r5, #1
 80053d8:	e7c1      	b.n	800535e <_printf_common+0x3e>
 80053da:	2030      	movs	r0, #48	; 0x30
 80053dc:	18e1      	adds	r1, r4, r3
 80053de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053e8:	4422      	add	r2, r4
 80053ea:	3302      	adds	r3, #2
 80053ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053f0:	e7c2      	b.n	8005378 <_printf_common+0x58>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4622      	mov	r2, r4
 80053f6:	4649      	mov	r1, r9
 80053f8:	4638      	mov	r0, r7
 80053fa:	47c0      	blx	r8
 80053fc:	3001      	adds	r0, #1
 80053fe:	d0e6      	beq.n	80053ce <_printf_common+0xae>
 8005400:	3601      	adds	r6, #1
 8005402:	e7d9      	b.n	80053b8 <_printf_common+0x98>

08005404 <_printf_i>:
 8005404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	7e0f      	ldrb	r7, [r1, #24]
 800540a:	4691      	mov	r9, r2
 800540c:	2f78      	cmp	r7, #120	; 0x78
 800540e:	4680      	mov	r8, r0
 8005410:	460c      	mov	r4, r1
 8005412:	469a      	mov	sl, r3
 8005414:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800541a:	d807      	bhi.n	800542c <_printf_i+0x28>
 800541c:	2f62      	cmp	r7, #98	; 0x62
 800541e:	d80a      	bhi.n	8005436 <_printf_i+0x32>
 8005420:	2f00      	cmp	r7, #0
 8005422:	f000 80d5 	beq.w	80055d0 <_printf_i+0x1cc>
 8005426:	2f58      	cmp	r7, #88	; 0x58
 8005428:	f000 80c1 	beq.w	80055ae <_printf_i+0x1aa>
 800542c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005434:	e03a      	b.n	80054ac <_printf_i+0xa8>
 8005436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800543a:	2b15      	cmp	r3, #21
 800543c:	d8f6      	bhi.n	800542c <_printf_i+0x28>
 800543e:	a101      	add	r1, pc, #4	; (adr r1, 8005444 <_printf_i+0x40>)
 8005440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005444:	0800549d 	.word	0x0800549d
 8005448:	080054b1 	.word	0x080054b1
 800544c:	0800542d 	.word	0x0800542d
 8005450:	0800542d 	.word	0x0800542d
 8005454:	0800542d 	.word	0x0800542d
 8005458:	0800542d 	.word	0x0800542d
 800545c:	080054b1 	.word	0x080054b1
 8005460:	0800542d 	.word	0x0800542d
 8005464:	0800542d 	.word	0x0800542d
 8005468:	0800542d 	.word	0x0800542d
 800546c:	0800542d 	.word	0x0800542d
 8005470:	080055b7 	.word	0x080055b7
 8005474:	080054dd 	.word	0x080054dd
 8005478:	08005571 	.word	0x08005571
 800547c:	0800542d 	.word	0x0800542d
 8005480:	0800542d 	.word	0x0800542d
 8005484:	080055d9 	.word	0x080055d9
 8005488:	0800542d 	.word	0x0800542d
 800548c:	080054dd 	.word	0x080054dd
 8005490:	0800542d 	.word	0x0800542d
 8005494:	0800542d 	.word	0x0800542d
 8005498:	08005579 	.word	0x08005579
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	1d1a      	adds	r2, r3, #4
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	602a      	str	r2, [r5, #0]
 80054a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0a0      	b.n	80055f2 <_printf_i+0x1ee>
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	682b      	ldr	r3, [r5, #0]
 80054b4:	0607      	lsls	r7, r0, #24
 80054b6:	f103 0104 	add.w	r1, r3, #4
 80054ba:	6029      	str	r1, [r5, #0]
 80054bc:	d501      	bpl.n	80054c2 <_printf_i+0xbe>
 80054be:	681e      	ldr	r6, [r3, #0]
 80054c0:	e003      	b.n	80054ca <_printf_i+0xc6>
 80054c2:	0646      	lsls	r6, r0, #25
 80054c4:	d5fb      	bpl.n	80054be <_printf_i+0xba>
 80054c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054ca:	2e00      	cmp	r6, #0
 80054cc:	da03      	bge.n	80054d6 <_printf_i+0xd2>
 80054ce:	232d      	movs	r3, #45	; 0x2d
 80054d0:	4276      	negs	r6, r6
 80054d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d6:	230a      	movs	r3, #10
 80054d8:	4859      	ldr	r0, [pc, #356]	; (8005640 <_printf_i+0x23c>)
 80054da:	e012      	b.n	8005502 <_printf_i+0xfe>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	1d19      	adds	r1, r3, #4
 80054e2:	6029      	str	r1, [r5, #0]
 80054e4:	0605      	lsls	r5, r0, #24
 80054e6:	d501      	bpl.n	80054ec <_printf_i+0xe8>
 80054e8:	681e      	ldr	r6, [r3, #0]
 80054ea:	e002      	b.n	80054f2 <_printf_i+0xee>
 80054ec:	0641      	lsls	r1, r0, #25
 80054ee:	d5fb      	bpl.n	80054e8 <_printf_i+0xe4>
 80054f0:	881e      	ldrh	r6, [r3, #0]
 80054f2:	2f6f      	cmp	r7, #111	; 0x6f
 80054f4:	bf0c      	ite	eq
 80054f6:	2308      	moveq	r3, #8
 80054f8:	230a      	movne	r3, #10
 80054fa:	4851      	ldr	r0, [pc, #324]	; (8005640 <_printf_i+0x23c>)
 80054fc:	2100      	movs	r1, #0
 80054fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005502:	6865      	ldr	r5, [r4, #4]
 8005504:	2d00      	cmp	r5, #0
 8005506:	bfa8      	it	ge
 8005508:	6821      	ldrge	r1, [r4, #0]
 800550a:	60a5      	str	r5, [r4, #8]
 800550c:	bfa4      	itt	ge
 800550e:	f021 0104 	bicge.w	r1, r1, #4
 8005512:	6021      	strge	r1, [r4, #0]
 8005514:	b90e      	cbnz	r6, 800551a <_printf_i+0x116>
 8005516:	2d00      	cmp	r5, #0
 8005518:	d04b      	beq.n	80055b2 <_printf_i+0x1ae>
 800551a:	4615      	mov	r5, r2
 800551c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005520:	fb03 6711 	mls	r7, r3, r1, r6
 8005524:	5dc7      	ldrb	r7, [r0, r7]
 8005526:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800552a:	4637      	mov	r7, r6
 800552c:	42bb      	cmp	r3, r7
 800552e:	460e      	mov	r6, r1
 8005530:	d9f4      	bls.n	800551c <_printf_i+0x118>
 8005532:	2b08      	cmp	r3, #8
 8005534:	d10b      	bne.n	800554e <_printf_i+0x14a>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	07de      	lsls	r6, r3, #31
 800553a:	d508      	bpl.n	800554e <_printf_i+0x14a>
 800553c:	6923      	ldr	r3, [r4, #16]
 800553e:	6861      	ldr	r1, [r4, #4]
 8005540:	4299      	cmp	r1, r3
 8005542:	bfde      	ittt	le
 8005544:	2330      	movle	r3, #48	; 0x30
 8005546:	f805 3c01 	strble.w	r3, [r5, #-1]
 800554a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800554e:	1b52      	subs	r2, r2, r5
 8005550:	6122      	str	r2, [r4, #16]
 8005552:	464b      	mov	r3, r9
 8005554:	4621      	mov	r1, r4
 8005556:	4640      	mov	r0, r8
 8005558:	f8cd a000 	str.w	sl, [sp]
 800555c:	aa03      	add	r2, sp, #12
 800555e:	f7ff fedf 	bl	8005320 <_printf_common>
 8005562:	3001      	adds	r0, #1
 8005564:	d14a      	bne.n	80055fc <_printf_i+0x1f8>
 8005566:	f04f 30ff 	mov.w	r0, #4294967295
 800556a:	b004      	add	sp, #16
 800556c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	f043 0320 	orr.w	r3, r3, #32
 8005576:	6023      	str	r3, [r4, #0]
 8005578:	2778      	movs	r7, #120	; 0x78
 800557a:	4832      	ldr	r0, [pc, #200]	; (8005644 <_printf_i+0x240>)
 800557c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	6829      	ldr	r1, [r5, #0]
 8005584:	061f      	lsls	r7, r3, #24
 8005586:	f851 6b04 	ldr.w	r6, [r1], #4
 800558a:	d402      	bmi.n	8005592 <_printf_i+0x18e>
 800558c:	065f      	lsls	r7, r3, #25
 800558e:	bf48      	it	mi
 8005590:	b2b6      	uxthmi	r6, r6
 8005592:	07df      	lsls	r7, r3, #31
 8005594:	bf48      	it	mi
 8005596:	f043 0320 	orrmi.w	r3, r3, #32
 800559a:	6029      	str	r1, [r5, #0]
 800559c:	bf48      	it	mi
 800559e:	6023      	strmi	r3, [r4, #0]
 80055a0:	b91e      	cbnz	r6, 80055aa <_printf_i+0x1a6>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	f023 0320 	bic.w	r3, r3, #32
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	2310      	movs	r3, #16
 80055ac:	e7a6      	b.n	80054fc <_printf_i+0xf8>
 80055ae:	4824      	ldr	r0, [pc, #144]	; (8005640 <_printf_i+0x23c>)
 80055b0:	e7e4      	b.n	800557c <_printf_i+0x178>
 80055b2:	4615      	mov	r5, r2
 80055b4:	e7bd      	b.n	8005532 <_printf_i+0x12e>
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	6826      	ldr	r6, [r4, #0]
 80055ba:	1d18      	adds	r0, r3, #4
 80055bc:	6961      	ldr	r1, [r4, #20]
 80055be:	6028      	str	r0, [r5, #0]
 80055c0:	0635      	lsls	r5, r6, #24
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	d501      	bpl.n	80055ca <_printf_i+0x1c6>
 80055c6:	6019      	str	r1, [r3, #0]
 80055c8:	e002      	b.n	80055d0 <_printf_i+0x1cc>
 80055ca:	0670      	lsls	r0, r6, #25
 80055cc:	d5fb      	bpl.n	80055c6 <_printf_i+0x1c2>
 80055ce:	8019      	strh	r1, [r3, #0]
 80055d0:	2300      	movs	r3, #0
 80055d2:	4615      	mov	r5, r2
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	e7bc      	b.n	8005552 <_printf_i+0x14e>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	2100      	movs	r1, #0
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	602a      	str	r2, [r5, #0]
 80055e0:	681d      	ldr	r5, [r3, #0]
 80055e2:	6862      	ldr	r2, [r4, #4]
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 f859 	bl	800569c <memchr>
 80055ea:	b108      	cbz	r0, 80055f0 <_printf_i+0x1ec>
 80055ec:	1b40      	subs	r0, r0, r5
 80055ee:	6060      	str	r0, [r4, #4]
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	6123      	str	r3, [r4, #16]
 80055f4:	2300      	movs	r3, #0
 80055f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055fa:	e7aa      	b.n	8005552 <_printf_i+0x14e>
 80055fc:	462a      	mov	r2, r5
 80055fe:	4649      	mov	r1, r9
 8005600:	4640      	mov	r0, r8
 8005602:	6923      	ldr	r3, [r4, #16]
 8005604:	47d0      	blx	sl
 8005606:	3001      	adds	r0, #1
 8005608:	d0ad      	beq.n	8005566 <_printf_i+0x162>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	079b      	lsls	r3, r3, #30
 800560e:	d413      	bmi.n	8005638 <_printf_i+0x234>
 8005610:	68e0      	ldr	r0, [r4, #12]
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	4298      	cmp	r0, r3
 8005616:	bfb8      	it	lt
 8005618:	4618      	movlt	r0, r3
 800561a:	e7a6      	b.n	800556a <_printf_i+0x166>
 800561c:	2301      	movs	r3, #1
 800561e:	4632      	mov	r2, r6
 8005620:	4649      	mov	r1, r9
 8005622:	4640      	mov	r0, r8
 8005624:	47d0      	blx	sl
 8005626:	3001      	adds	r0, #1
 8005628:	d09d      	beq.n	8005566 <_printf_i+0x162>
 800562a:	3501      	adds	r5, #1
 800562c:	68e3      	ldr	r3, [r4, #12]
 800562e:	9903      	ldr	r1, [sp, #12]
 8005630:	1a5b      	subs	r3, r3, r1
 8005632:	42ab      	cmp	r3, r5
 8005634:	dcf2      	bgt.n	800561c <_printf_i+0x218>
 8005636:	e7eb      	b.n	8005610 <_printf_i+0x20c>
 8005638:	2500      	movs	r5, #0
 800563a:	f104 0619 	add.w	r6, r4, #25
 800563e:	e7f5      	b.n	800562c <_printf_i+0x228>
 8005640:	08006d39 	.word	0x08006d39
 8005644:	08006d4a 	.word	0x08006d4a

08005648 <memmove>:
 8005648:	4288      	cmp	r0, r1
 800564a:	b510      	push	{r4, lr}
 800564c:	eb01 0402 	add.w	r4, r1, r2
 8005650:	d902      	bls.n	8005658 <memmove+0x10>
 8005652:	4284      	cmp	r4, r0
 8005654:	4623      	mov	r3, r4
 8005656:	d807      	bhi.n	8005668 <memmove+0x20>
 8005658:	1e43      	subs	r3, r0, #1
 800565a:	42a1      	cmp	r1, r4
 800565c:	d008      	beq.n	8005670 <memmove+0x28>
 800565e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005666:	e7f8      	b.n	800565a <memmove+0x12>
 8005668:	4601      	mov	r1, r0
 800566a:	4402      	add	r2, r0
 800566c:	428a      	cmp	r2, r1
 800566e:	d100      	bne.n	8005672 <memmove+0x2a>
 8005670:	bd10      	pop	{r4, pc}
 8005672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800567a:	e7f7      	b.n	800566c <memmove+0x24>

0800567c <_sbrk_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	2300      	movs	r3, #0
 8005680:	4d05      	ldr	r5, [pc, #20]	; (8005698 <_sbrk_r+0x1c>)
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fc fd10 	bl	80020ac <_sbrk>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_sbrk_r+0x1a>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_sbrk_r+0x1a>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	20000690 	.word	0x20000690

0800569c <memchr>:
 800569c:	4603      	mov	r3, r0
 800569e:	b510      	push	{r4, lr}
 80056a0:	b2c9      	uxtb	r1, r1
 80056a2:	4402      	add	r2, r0
 80056a4:	4293      	cmp	r3, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	d101      	bne.n	80056ae <memchr+0x12>
 80056aa:	2000      	movs	r0, #0
 80056ac:	e003      	b.n	80056b6 <memchr+0x1a>
 80056ae:	7804      	ldrb	r4, [r0, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	428c      	cmp	r4, r1
 80056b4:	d1f6      	bne.n	80056a4 <memchr+0x8>
 80056b6:	bd10      	pop	{r4, pc}

080056b8 <memcpy>:
 80056b8:	440a      	add	r2, r1
 80056ba:	4291      	cmp	r1, r2
 80056bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c0:	d100      	bne.n	80056c4 <memcpy+0xc>
 80056c2:	4770      	bx	lr
 80056c4:	b510      	push	{r4, lr}
 80056c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ca:	4291      	cmp	r1, r2
 80056cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d0:	d1f9      	bne.n	80056c6 <memcpy+0xe>
 80056d2:	bd10      	pop	{r4, pc}

080056d4 <_realloc_r>:
 80056d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d8:	4680      	mov	r8, r0
 80056da:	4614      	mov	r4, r2
 80056dc:	460e      	mov	r6, r1
 80056de:	b921      	cbnz	r1, 80056ea <_realloc_r+0x16>
 80056e0:	4611      	mov	r1, r2
 80056e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056e6:	f7ff bc37 	b.w	8004f58 <_malloc_r>
 80056ea:	b92a      	cbnz	r2, 80056f8 <_realloc_r+0x24>
 80056ec:	f7ff fbcc 	bl	8004e88 <_free_r>
 80056f0:	4625      	mov	r5, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f8:	f000 f81b 	bl	8005732 <_malloc_usable_size_r>
 80056fc:	4284      	cmp	r4, r0
 80056fe:	4607      	mov	r7, r0
 8005700:	d802      	bhi.n	8005708 <_realloc_r+0x34>
 8005702:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005706:	d812      	bhi.n	800572e <_realloc_r+0x5a>
 8005708:	4621      	mov	r1, r4
 800570a:	4640      	mov	r0, r8
 800570c:	f7ff fc24 	bl	8004f58 <_malloc_r>
 8005710:	4605      	mov	r5, r0
 8005712:	2800      	cmp	r0, #0
 8005714:	d0ed      	beq.n	80056f2 <_realloc_r+0x1e>
 8005716:	42bc      	cmp	r4, r7
 8005718:	4622      	mov	r2, r4
 800571a:	4631      	mov	r1, r6
 800571c:	bf28      	it	cs
 800571e:	463a      	movcs	r2, r7
 8005720:	f7ff ffca 	bl	80056b8 <memcpy>
 8005724:	4631      	mov	r1, r6
 8005726:	4640      	mov	r0, r8
 8005728:	f7ff fbae 	bl	8004e88 <_free_r>
 800572c:	e7e1      	b.n	80056f2 <_realloc_r+0x1e>
 800572e:	4635      	mov	r5, r6
 8005730:	e7df      	b.n	80056f2 <_realloc_r+0x1e>

08005732 <_malloc_usable_size_r>:
 8005732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005736:	1f18      	subs	r0, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	bfbc      	itt	lt
 800573c:	580b      	ldrlt	r3, [r1, r0]
 800573e:	18c0      	addlt	r0, r0, r3
 8005740:	4770      	bx	lr
	...

08005744 <_init>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	bf00      	nop
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr

08005750 <_fini>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr
